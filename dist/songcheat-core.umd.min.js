!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t(e.songcheatCore={})}(this,function(e){"use strict";class t{static title(e){return"\n"+this.spaces(e.length+8,"*")+"\n*** "+e+" ***\n"+this.spaces(e.length+8,"*")+"\n"}static firstUpper(e){return e.charAt(0).toUpperCase()+e.slice(1)}static camelCase(e,t){var r=e.toLowerCase().replace(/(?:[-_])(.)/g,function(e,t){return t.toUpperCase()});return t?r.charAt(0).toUpperCase()+r.slice(1):r}static spaces(e,t){if(isNaN(e)||!isFinite(e)||e<0)throw new Error("Length must a positive finite number");for(var r="",o=0;o<e;o++)r+=t||" ";return r}static interlace(e,t,r,o){var n=e.split(/\r?\n/),a=t.split(/\r?\n/);return n.map(function(e,t){let n=o||a[t]&&a[t].trim()?[e,a[t]]:[e];return"string"==typeof r&&n.push(r),n.join("\n")}).join("\n")}static encodeQueryData(e){let t=[];for(let r in e)t.push(encodeURIComponent(r)+"="+encodeURIComponent(e[r]));return t.join("&")}static duration(e){if(":32"===e)return 2;if(":16"===e)return 4;if(":8"===e)return 8;if(":q"===e)return 16;if(":h"===e)return 32;if(":w"===e)return 64;if(":32d"===e)return 3;if(":16d"===e)return 6;if(":8d"===e)return 12;if(":qd"===e)return 24;if(":hd"===e)return 48;if(":wd"===e)return 96;throw new Error('Invalid duration code "'+e+'"')}static durationcode(e){for(let t of["w","h","q","8","16","32"]){if(this.duration(":"+t)===e)return":"+t;if(this.duration(":"+t+"d")===e)return":"+t+"d"}throw new Error("Could not find a code with a value of "+e+" units")}static durationcodes(e){for(var t=[],r=e,o=0;r>0;)try{t.push(this.durationcode(r)),r=o,o=0}catch(e){r--,o++}if(o>0)throw new Error("Could not find codes adding to a value of "+e+" units");return t}static fret2char(e){if(isNaN(e)||e<0||e>35)throw new Error("Cannot convert fret number "+e+" to a single char (expected a value between 0 and 35)");return e<10?""+e:String.fromCharCode("A".charCodeAt(0)+e-10)}static char2fret(e){if("string"!=typeof e)throw new Error("Invalid fret char "+e+" expected a string");if(!e.match(/^[0-9A-Z]$/))throw new Error("Invalid fret char "+e+" (expected a value between [0-9] or [A-Z])");return e>="A"?10+e.charCodeAt(0)-"A".charCodeAt(0):parseInt(e,10)}static abs2rel(e,t){let r=this.char2fret(e);if(isNaN(r)||r<0)throw new Error("Invalid fret number "+r+" (expected a positive or 0 integer value)");if(0===r)return 0;if(isNaN(t)||t<0)throw new Error("Invalid starting fret number "+t+" (expected a positive or 0 integer value)");if(t+8<r||t>r)throw new Error("Fret "+r+" cannot be made relative to starting fret "+t+" within the allowed range of 1 to 9");return r+1-t}static rel2abs(e,t){return this.fret2char(e?e+t-1:e)}static chordStrings(e,t){if(!e.tablature)throw new Error("Tablature not defined for chord "+e.name);if(!e.fingering)throw new Error("Fingering not defined for chord "+e.name);for(var r=[],o=0;o<e.tablature.length;o++){var n=6-o;if("x"!==e.tablature[o]&&(t=t.replace(/B'/g,n>=5?n-1:n),(t=t.replace(/B/g,n)).match(/^\*/)||-1!==t.indexOf(n))){let a=this.char2fret(e.tablature[o]),i="x"===t[t.match(/^\*/)?1:t.indexOf(n)+1];r.push({string:n,fret:a,mute:i})}}return r}}class r{constructor(e,t){this.message=t,this.line=e}toString(){return"Parser error at line "+this.line+": "+this.message}}class o{constructor(){this.songcheat={},this.blocks={}}parse(e){this.songcheat={},this.blocks={};let o=this.tokenize(e);if(0===o.length)return!0;let n=0;for(;n<o.length;){let e=o[n],a=this.isKeyword(e);if(!a)throw new r(e.line,'expected keyword, found "'+e.value+'"');let i=[];for(++n;n<o.length&&!this.isKeyword(o[n]);++n)i.push(o[n]);let s=this["handle"+t.firstUpper(a)]||this.handleDefault;if("function"!=typeof s)throw new r(e.line,"non function handler found for keyword "+a);s.call(this,e.line,a,i)}return this.songcheat}isKeyword(e){let r=t.camelCase(e.value);return["artist","title","year","difficulty","video","tutorial","comment","tuning","capo","key","time","tempo","shuffle","chord","rhythm","block","part","lyricsUnit","structure"].indexOf(r)>=0&&r}tokenize(e){let t=[],r=/(?<=^[^"]*(?:"[^"]*"[^"]*)*)[\s\t]+(?=(?:[^"]*"[^"]*")*[^"]*$)/,o=/(?<=^[^"]*(?:"[^"]*"[^"]*)*)(\r?\n)(?=(?:[^"]*"[^"]*")*[^"]*$)/,n=1;for(let a of e.split(o))if(!a.match(/^\r?\n$/)){if((a=a.trim())&&!a.match(/^#/))for(let e of a.split(r).map(e=>e.trim().replace(/^"|"$/g,"")))t.push({value:e,line:n});n+=1+(a.match(/(?:\r?\n)/g)||[]).length}return t}handleDefault(e,t,o){if(1!==o.length)throw new r(e,t.toUpperCase()+" expected exactly 1 value, but found "+o.length);this.songcheat[t]=["year","capo","difficulty"].indexOf(t)>=0?parseInt(o[0].value,10):o[0].value}handleSignature(e,t,o){if(1!==o.length)throw new r(e,t.toUpperCase()+" expected exactly 1 value, but found "+o.length);this.songcheat.signature=this.songcheat.signature||{},this.songcheat.signature[t]="tempo"===t?parseFloat(o[0].value,10):o[0].value}handleKey(e,t,r){return this.handleSignature(e,t,r)}handleTempo(e,t,r){return this.handleSignature(e,t,r)}handleShuffle(e,t,r){return this.handleSignature(e,t,r)}handleTime(e,t,o){if(3!==o.length)throw new r(e,t.toUpperCase()+" expected exactly 3 values, but found "+o.length);this.songcheat.signature=this.songcheat.signature||[],this.songcheat.signature.time={beatsPerBar:o[1].value,beatDuration:o[2].value,symbol:o[0].value}}handleChord(e,t,o){if(o.length<2||o.length>4)throw new r(e,t.toUpperCase()+' expected between 2 and 4 values (name, tablature[, fretting="000000/-", comment=""]), but found '+o.length);let n=o[0].value,a=o[1].value,i=o.length>=3?o[2].value:"000000/-",s=o.length>=4?o[3].value:"";this.songcheat.chords=this.songcheat.chords||[];let h={id:this.songcheat.chords.length+1,name:n,tablature:a,fingering:i,comment:s};return this.songcheat.chords.push(h),h}handleRhythm(e,t,o){if(2!==o.length)throw new r(e,t.toUpperCase()+" expected exactly 2 values (id and score), but found "+o.length);this.songcheat.rhythms=this.songcheat.rhythms||[],this.songcheat.rhythms.push({id:this.songcheat.rhythms.length+1,name:o[0].value,score:o[1].value})}handleBlock(e,t,o){if(o.length<2)throw new r(e,t.toUpperCase()+" expected at least 2 values (name and bar(s)), but found "+o.length);this.blocks[o[0].value]=o.slice(1)}handlePart(e,t,o){if(o.length<2)throw new r(e,t.toUpperCase()+" expected at least 2 values (name and bar(s)), but found "+o.length);this.songcheat.parts=this.songcheat.parts||[];let n={id:this.songcheat.parts.length+1,name:o[0].value,phrases:[]};o=o.splice(1),this.songcheat.parts.push(n);let a=[];for(let e=0;e<o.length;e++){let t=o[e];if("||"===t.value){n.phrases.push({bars:a}),a=[];continue}if("%"===t.value){if(0===a.length)throw new r(t.line,"found bar repeater "+t.value+" but there is no bar yet in phrase");a.push(JSON.parse(JSON.stringify(a[a.length-1])));continue}if(t.value.match(/^\[[^[\]]+\]$/)){let e={rhythm:null,chords:[]},o=t.value.substr(1,t.value.length-2).split(/\*|:/),n=!1;for(let t of this.songcheat.rhythms)if(t.name===o[0]){e.rhythm=t.id,n=!0;break}if(!n)throw new r(t.line,o[0]+" is not the name of an existing rhythm");o=o.slice(1);for(let n of o){if(!n.trim()){if(0===e.chords.length)throw new r(t.line,"found chord repeater but there is no chord yet in bar");e.chords.push(JSON.parse(JSON.stringify(e.chords[e.chords.length-1])));continue}let o=!1;for(let t of this.songcheat.chords)if(t.name===n){e.chords.push(t.id),o=!0;break}if(!o&&n.match(/^[x0-9A-Z]{6}(\/[-0-9A-Z])?$/)){let r=this.handleChord(t.line,"chord",[{value:n,line:t.line},{value:n.split("/")[0],line:t.line},{value:"000000/"+(n.split("/")[1]||"-"),line:t.line}]);e.chords.push(r.id),o=!0}if(!o)throw new r(t.line,n+" is not the name of an existing chord and is not a valid chord tablature")}a.push(e);continue}if(!this.blocks[t.value])throw new r(t.line,t.value+" is not the name of an existing block");let i=[e,1];Array.prototype.push.apply(i,this.blocks[t.value]),Array.prototype.splice.apply(o,i),e--}a.length>0&&n.phrases.push({bars:a})}handleStructure(e,t,o){if(o.length<2)throw new r(e,t.toUpperCase()+" expected at least 2 values (part name and lyrics), but found "+o.length);if(o.length%2!=0)throw new r(e,t.toUpperCase()+" expected an even number of parameters (N x part name and lyrics), but found "+o.length);this.songcheat.structure=this.songcheat.structure||[];for(let e=0;e<o.length;e+=2){let t=o[e],n=!1;for(let r of this.songcheat.parts)if(r.name===t.value){this.songcheat.structure.push({part:r.id,lyrics:o[e+1].value}),n=!0;break}if(!n)throw new r(t.line,t.value+'" is not the name of an existing part')}}}let n=20,a=!1,i=!1;class s{constructor(e){this.message=e}toString(){return"Compiler error: "+this.message}}class h{constructor(e){this.DEBUG=e}log(){this.DEBUG>0&&console.log.apply(console,arguments)}compile(e){if(e.mode=e.mode||"rt",e.barsPerLine=e.barsPerLine||4,e.signature.key=e.signature.key||"C",e.lyricsUnit=e.lyricsUnit||e.signature.time.beatDuration,e.barDuration=e.signature.time.beatsPerBar*t.duration(e.signature.time.beatDuration),this.resolveIds(e),!e.parts){e.parts=[];for(let t of e.parts)e.structure.push({part:t})}let r={},o={};for(let t of e.structure)r[t.part.id]=void 0===r[t.part.id]?1:r[t.part.id]+1;for(let t of e.structure)o[t.part.id]=void 0===o[t.part.id]?1:o[t.part.id]+1,t.name||(t.name=t.part.name+(r[t.part.id]>1?" "+o[t.part.id]:""));let n=["red","#06D6A0","blue","purple","orange","magenta"],a=0;for(let t of e.parts)t.color||(t.color=n[a++%n.length]);for(let t of e.rhythms)this.compileRhythm(t,e.signature.time.beatDuration);for(let t of e.parts){let r=0;for(let o of t.phrases){o.chordChanges=[];let n=null;for(let t of o.bars)n=this.addChordChanges(t,o.chordChanges,e.barDuration,!1,n);this.log("Phrase wise chord durations for phrase "+t.name+"."+(r+1));for(let e of o.chordChanges)this.log("\t["+e.chord.name+"] = "+e.duration+" units");let a=0;for(let n of o.bars){n.chordChanges={bar:[],rhythm:[]};for(let t of["rhythm","bar"])this.addChordChanges(n,n.chordChanges[t],e.barDuration,"bar"===t);this.log("\tRythm wise chord durations for bar "+t.name+"."+(r+1)+"."+(a+1));for(let e of n.chordChanges.rhythm)this.log("\t\t["+e.chord.name+"] = "+e.duration+" units");this.log("\tBar wise chord durations for bar "+t.name+"."+(r+1)+"."+(a+1));for(let e of n.chordChanges.bar)this.log("\t\t["+e.chord.name+"] = "+e.duration+" units");a++}r++}t.duration=0;for(let e of t.phrases)for(let r of e.bars)t.duration+=r.rhythm.duration}return e}resolveIds(e){let t=0;for(let r of e.structure){if(!r.part)throw new s("Part not defined for unit "+(t+1));let o=this.resolveId(e.parts,r.part);if(!o)throw new s("Part "+r.part+" not found");r.part=o,t++}for(let t of e.parts){if(!t.phrases)throw new s('Phrases not defined for part "'+t.name+'"');if(!(t.phrases instanceof Array))throw new s('Phrases defined for part "'+t.name+'" must be an Array, found: '+typeof e.parts.phrases);let r=0;for(let o of t.phrases){let n=0;for(let a of o.bars){if(!a.rhythm)throw new s("Rhythm not defined for bar "+(n+1)+" of phrase "+(r+1)+" of "+t.name);if(!a.chords)throw new s("Chords not defined for bar "+(n+1)+" of phrase "+(r+1)+" of "+t.name);if(!(a.chords instanceof Array))throw new s("Chords defined for bar "+(n+1)+" of phrase "+(r+1)+" must be an Array, found: "+typeof a.chords);let o=this.resolveId(e.rhythms,a.rhythm);if(!o)throw new s("Rhythm "+a.rhythm+" not found for bar "+(n+1)+" of phrase "+(r+1));a.rhythm=o;let i=[];for(let t of a.chords){let o=this.resolveId(e.chords,t);if(!o)throw new s("Chord "+t+" not found for bar "+(n+1)+" of phrase "+(r+1));i.push(o)}a.chords=i,n++}r++}}}resolveId(e,t){if(e)for(let r of e)if(r.id===t)return r;return null}compileRhythm(e,r){this.log("Compiling rhythm "+e.id+' with score "'+e.score+'"');let o=r;e.placeholdercount=0;let n=1,a=null;e.compiledScore=[];for(let r of e.score.split(/((?::(?:w|h|q|8|16|32)d?)|\(#\)|T?\s*\([^(]*\)[^()\sT:]*)/)){if(r=r.trim()){let i=null;if(i=r.match(/^(:(?:w|h|q|8|16|32)d?)$/))o=t.duration(i[1]);else if(i=r.match(/^\(#\)$/))e.compiledScore.push({rest:!0,duration:o,tied:!1,strings:!1,flags:{},placeholderIndex:e.placeholdercount++});else{if(!(i=r.match(/^(T?)\s*\(([^(]*)\)([^()\s]*)$/)))throw new s('Invalid token "'+r+'" in rhythm score definition at position '+n+(a?' (after "'+a+'")':""));{let t="T"===i[1],n=i[2];if(""===n&&(n="*"),"x"===n&&(n="*x"),!n.match(/^(?:(\*x?)|((?:(?:B|B'|1|2|3|4|5|6)x?)+))$/))throw new s("Invalid syntax found in chord placeholder: "+n);let a=i[3],h={stroke:null,accent:!1,pm:!1,fingering:null};for(let e of a.split(/(dd?|uu?|>|PM|[pima]+)/))if(e.trim())if(e.match(/^(dd?|uu?)$/g)){if(h.fingering)throw new s("Fingering ("+h.fingering+") and stroke ("+e+") cannot be both defined for the chord placeholder: "+r);if(h.pm)throw new s("Palm muting (PM) and stroke ("+e+") cannot be both defined for the chord placeholder: "+r);if(h.stroke)throw new s("More than one stroke mode (d, u, dd, uu) defined for the chord placeholder: "+r);h.stroke=e}else if(e.match(/^[pima]+$/)){if(h.stroke)throw new s("Stroke ("+h.stroke+") and fingering ("+e+") cannot be both defined for the chord placeholder: "+r);if(h.pm)throw new s("Palm muting (PM) and fingering ("+e+") cannot be both defined for the chord placeholder: "+r);if(h.fingering)throw new s("More than one fingering (pima) defined for the chord placeholder: "+r);h.fingering=e}else if(e.match(/^PM$/)){if(h.stroke)throw new s("Stroke ("+h.stroke+") and palm muting ("+e+") cannot be both defined for the chord placeholder: "+r);if(h.fingering)throw new s("Fingering ("+h.fingering+") and palm muting ("+e+") cannot be both defined for the chord placeholder: "+r);if(h.pm)throw new s("More than one palm muting (PM) defined for the chord placeholder: "+r);h.pm=!0}else{if(!e.match(/^>$/))throw new s('Invalid flag "'+e+'" defined for chord placeholder "'+r+'"');if(h.accent)throw new s("More than one accent (>) defined for the same placeholder: "+r);h.accent=!0}e.compiledScore.push({rest:!1,duration:o,tied:t,strings:n,flags:h,placeholderIndex:e.placeholdercount++})}}a=r}n+=r.length}e.duration=0;for(let t of e.compiledScore)e.duration+=t.duration}addChordChanges(e,t,r,o,n){if(e.chords.length<1)throw new s("chords must contain at least 1 entry, but "+e.chords.length+" were found");for(;e.chords.length<e.rhythm.placeholdercount;)e.chords.push(e.chords[e.chords.length-1]);let a=0;for(let i of e.rhythm.compiledScore){let h=e.chords[i.placeholderIndex];if(!h)throw new s("No chord found for placeholder "+(i.placeholderIndex+1));n===h&&a%r!=0?t[t.length-1].duration+=i.duration:t.push({chord:h,duration:i.duration,hidden:n===h&&!o}),n=h,a+=i.duration}return n}parseLyrics(e,r,o){let a=[],i=0;e.lyrics=(e.lyrics||"").replace(/\r/g,""),e.groups=[];for(let n of e.lyrics.split(/((?::(?:w|h|q|8|16|32)d?)?:|\|)/)){let a=null;(a=n.match(/(:(?:w|h|q|8|16|32)d?)?:/))?i=this.registerGroup(e,i,a[1]?t.duration(a[1]):r,o):n.match(/\|/)?i=this.registerGroup(e,i,o-i%o,o):n.length>0&&e.groups.push({text:n,offset:i,duration:0})}e.groups.length&&0===e.groups[e.groups.length-1].duration&&(i=this.registerGroup(e,i,o-i%o,o));let s=e.part.duration-i;this.log("["+e.name+"] Missing duration = "+s+" units ("+e.part.duration+" - "+i+") = "+s/o+" bars missing"),s<0&&a.push("Lyrics contain "+Math.floor(-s/o)+" bar(s)"+(-s%o?" and "+t.durationcodes(-s%o):"")+" in excess"),i=this.registerGroup(e,i,s,o);for(let t of e.groups){let e=this.getGroupLength(t)+1;t.plen=Math.max(e,Math.ceil(n*t.duration/o)),t.p=t.plen/t.duration,t.bar=(t.offset+t.duration)%o==0,t.chordChanges={bar:[],rhythm:[],phrase:[]}}e.pmax=0;for(let t of e.groups)e.pmax=Math.max(e.pmax,t.p);i=0;for(let t of e.part.phrases)for(let r of t.chordChanges){let t=null;for(let r of e.groups)r.offset<=i&&(t=r);if(!t)throw new Error("No closest group found for chord "+r.chord.name+" with offset "+i+" units");t.chordChanges.phrase.push({offset:i,text:this.getChordDisplay(r)}),i+=r.duration}i={rhythm:0,bar:0};for(let t of e.part.phrases)for(let r of t.bars)for(let t of["rhythm","bar"])for(let o of r.chordChanges[t]){let r=null;for(let o of e.groups)o.offset<=i[t]&&(r=o);if(!r)throw new Error("No closest group found for chord "+o.chord.name+" with offset "+i[t]+" units");r.chordChanges[t].push({offset:i[t],text:this.getChordDisplay(o)}),i[t]+=o.duration}var h="Groups of unit ["+e.name+"]:\n",l=0;let f=!1;for(let t of e.groups)h+="\tBar "+(l+1)+"\t["+t.text.replace(/\n/g,"\\N")+"]:"+t.duration+" ("+t.offset+" - "+(t.offset+t.duration)+") L="+this.getGroupLength(t)+" L'="+t.plen+" ρ="+t.p.toFixed(2)+" #Chord changes %bar= "+t.chordChanges.bar.length+" %phrase= "+t.chordChanges.phrase.length,0===t.duration&&(f=!0),t.bar&&(l++,h+=" | "),h+="\n";if(h+="ρ max = "+e.pmax.toFixed(2),this.log(h),f)throw new Error("Detected group with 0 duration");return a}getUnitText(e,r,o,n,a){var s="",h=0,l=0;for(let i of e.groups){i.position=[...s.replace(/\n/g,"")].length,i.length=Math.ceil(i.duration*e.pmax);let d=i.bar||!i.text.match(/-$/),u=null;r>0&&(u=this.getGroupLength(i)+r-(d?0:1)),u&&(i.length=Math.min(i.length,u));let c=i.bar?1:0;if(i.chordChanges[n])for(let e=0;e<i.chordChanges[n].length;e++)c+=i.chordChanges[n][e].text.length;c=Math.max(this.getGroupLength(i)+(d?1:0),c),i.length=Math.max(i.length,c);let p=t.spaces(i.length-this.getGroupLength(i),a||this.DEBUG?".":" ");p=p.replace(/(.)$/,i.bar?o>0&&(h+1)%o==0?"|\n":"|":this.DEBUG?"*":"$1");var f=(o>0?i.text.replace(/\n/g,""):i.text)+p;this.log("["+e.name+"] Display group "+(l+1)+' "'+f.replace(/\n/g,"\\N")+'" on '+i.length+" chars (CEIL "+(i.duration*e.pmax).toFixed(2)+" MIN "+c+" MAX "+(u||"n/a")+")"),s+=f,l++,i.bar&&h++}if(!n)return s;let d=[];for(let t of e.groups){let e=0,r=0;for(let r of t.chordChanges[n])e+=r.text.length;for(let o of t.chordChanges[n]){let n=Math.ceil((o.offset-t.offset)/t.duration*t.length),a=n;for(;n+e>t.length-(t.bar?1:0);)n--;for(;n-r<0;)n++;this.log('Closest group "'+t.text.replace(/\n/g,"\\n")+'" with offset '+t.offset+" and position "+t.position+" found for "+o.text.trim()+" with offset "+o.offset+" units\n\tposition delta from group start = "+n+" chars (initially "+a+" chars)"),d.push({text:o.text,offset:o.offset,position:t.position+n}),r=n+o.text.length,e-=o.text.length}}for(let t of d)this.log("["+e.name+"] Should insert "+t.text+" @ "+t.offset+" units / "+t.position+" chars");let u=0,c=0,p=s,g="";s="";for(let t of p)if("\n"===t)s+="\n",g+="\n",c=0;else{for(let t of d)t.inserted||t.position<=u&&(this.log("["+e.name+"] Inserting "+t.text+" @ "+u+" chars"),g+=t.text,t.inserted=!0,c=t.text.length);u++,0===c?g+="|"===t?t:" ":c--,s+="|"!==t||a||this.DEBUG?t:" "}return t.interlace(g,s,null,i)}registerGroup(e,t,r,o){if(!o)throw new Error("Invalid bar duration passed to registerGroup");for(;r>0;){let n=Math.min(r,o-t%o);(!e.groups.length||!a&&e.groups[e.groups.length-1].duration>0)&&e.groups.push({text:"",offset:t,duration:0}),e.groups[e.groups.length-1].duration+=n,t+=n,(r-=n)>0&&e.groups.push({text:this.DEBUG>1?"_":"",offset:t,duration:0})}return t}getGroupLength(e){return[...e.text.replace(/\n/g,"")].length}getChordDisplay(e){return e.hidden?" ":e.chord.name+" "}}e.Utils=t,e.Parser=class{constructor(){this.parser_=new o}parse(e){return this.parser_.parse(e)}},e.ParserException=r,e.Compiler=class{constructor(e,t){this.compiler_=new h(t),e&&this.set(e)}set(e){this.compiler_.log(t.title("COMPILE SONGCHEAT")),this.scc=this.compiler_.compile(JSON.parse(JSON.stringify(e)))}parseLyrics(e){return this.compiler_.log(t.title("PARSE LYRICS "+e.name)),this.compiler_.parseLyrics(e,t.duration(this.scc.lyricsUnit),this.scc.barDuration)}getUnitText(e,r,o,n,a){return this.compiler_.log(t.title(`GET LYRICS TEXT ${e.name} (maxConsecutiveSpaces = ${r}, split = ${o}, chordChangesMode = ${n}, showDots = ${a})`)),this.compiler_.getUnitText(e,r,o,n,a)}getPartText(e,r,o,n,a){let i={name:e.name,part:e};return this.compiler_.log(t.title("PARSE PART LYRICS "+i.name)),this.compiler_.parseLyrics(i,t.duration(this.scc.lyricsUnit),this.scc.barDuration),this.compiler_.log(t.title(`GET PART LYRICS TEXT ${i.name} (maxConsecutiveSpaces = ${r}, split = ${o}, chordChangesMode = ${n}, showDots = ${a})`)),this.compiler_.getUnitText(i,r,o,n,a)}},e.CompilerException=s,Object.defineProperty(e,"__esModule",{value:!0})});