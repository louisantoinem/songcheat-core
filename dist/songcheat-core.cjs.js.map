{"version":3,"file":"songcheat-core.cjs.js","sources":["../src/utils.js","../src/parser.js","../src/compiler.js","../src/lyrics.js","../src/chordpix.js","../src/vextab.js","../node_modules/@mohayonao/wave-tables/index.js","../src/player.js"],"sourcesContent":["export class Utils {\n  /**\n   * Array helper functions\n   */\n\n  static arraysEqual (a, b) {\n    if (a === b) return true\n    if (a === null || b === null) return false\n    if (a.length !== b.length) return false\n    for (var i = 0; i < a.length; ++i) {\n      if (a[i] !== b[i]) return false\n    }\n    return true\n  }\n\n  /**\n   * String helper functions\n   */\n\n  static title (str) {\n    return '\\n' + this.spaces(str.length + 8, '*') + '\\n*** ' + str + ' ***\\n' + this.spaces(str.length + 8, '*') + '\\n'\n  }\n\n  static firstUpper (s) {\n    return s.charAt(0).toUpperCase() + s.slice(1)\n  }\n\n  static camelCase (s, firstUpper) {\n    var camel = s.toLowerCase().replace(/(?:[-_])(.)/g, function (match, group1) { return group1.toUpperCase() })\n    return firstUpper ? camel.charAt(0).toUpperCase() + camel.slice(1) : camel\n  }\n\n  static spaces (length, char) {\n    if (isNaN(length) || !isFinite(length) || length < 0) throw new Error('Length must a positive finite number')\n    var s = ''\n    for (var i = 0; i < length; i++) s += char || ' '\n    return s\n  }\n\n  static replaceComposedChars (s) {\n    // fix composed UTF8 characters (not handled correctly by ACE when typing a newline after one of those)\n    // http://php.net/manual/fr/regexp.reference.unicode.php\n    // http://www.fileformat.info/info/unicode/category/Mn/list.htm\n\n    s = s.replace(/a\\u0300/g, 'à')\n    s = s.replace(/e\\u0300/g, 'è')\n    s = s.replace(/e\\u0301/g, 'é')\n    s = s.replace(/e\\u0302/g, 'ê')\n    s = s.replace(/i\\u0302/g, 'î')\n    s = s.replace(/o\\u0302/g, 'ô')\n    s = s.replace(/u\\u0302/g, 'û')\n    s = s.replace(/a\\u0302/g, 'â')\n    s = s.replace(/o\\u0303/g, 'õ')\n    s = s.replace(/a\\u0303/g, 'ã')\n\n    return s\n  }\n\n  /**\n   * Interlace two multi line strings: one line of each file in alternance\n   * If the second file contains more line then the first one, these additional lines will be ignored\n   **/\n\n  static interlace (text1, text2, sepLine, keepEmptyLines) {\n    var a1 = text1.split(/\\r?\\n/)\n    var a2 = text2.split(/\\r?\\n/)\n    var a = a1.map(function (v, i) {\n      let lines = keepEmptyLines || (a2[i] && a2[i].trim()) ? [v, a2[i]] : [v]\n      if (typeof sepLine === 'string') lines.push(sepLine)\n      return lines.join('\\n')\n    })\n    return a.join('\\n')\n  }\n\n  /**\n   * Encode given parameters as a GET query string\n   **/\n\n  static encodeQueryData (data) {\n    let ret = []\n    for (let d in data) { ret.push(encodeURIComponent(d) + '=' + encodeURIComponent(data[d])) }\n    return ret.join('&')\n  }\n\n  /**\n   * Convert a duration code to the smallest unit (64th)\n   **/\n\n  static duration (code) {\n    if (code === ':32') return 2\n    if (code === ':16') return 4\n    if (code === ':8') return 8\n    if (code === ':q') return 16\n    if (code === ':h') return 32\n    if (code === ':w') return 64\n\n    if (code === ':32d') return 3\n    if (code === ':16d') return 6\n    if (code === ':8d') return 12\n    if (code === ':qd') return 24\n    if (code === ':hd') return 48\n    if (code === ':wd') return 96\n\n    throw new Error('Invalid duration code \"' + code + '\"')\n  }\n\n  /**\n   * Convert back a number of units (64th) into a duration code\n   **/\n\n  static durationcode (units) {\n    for (let code of ['w', 'h', 'q', '8', '16', '32']) {\n      if (this.duration(':' + code) === units) return ':' + code\n      if (this.duration(':' + code + 'd') === units) return ':' + code + 'd'\n    }\n\n    throw new Error('Could not find a code with a value of ' + units + ' units')\n  }\n\n  /**\n   * Convert a number of units (64th) into one or several duration codes\n   **/\n\n  static durationcodes (units) {\n    var codes = []\n\n    var current = units\n    var rest = 0\n\n    while (current > 0) {\n      try {\n        codes.push(this.durationcode(current))\n        current = rest\n        rest = 0\n      } catch (e) {\n        current--\n        rest++\n      }\n    }\n\n    if (rest > 0) throw new Error('Could not find codes adding to a value of ' + units + ' units')\n\n    return codes\n  }\n\n  /**\n   * Convert a fret number (up to 35) to a single char (digit or capital letter)\n   * Fret 10 is notated as A, 11 as B, ... and 35 as Z\n   */\n\n  static fret2char (fret) {\n    if (isNaN(fret) || fret < 0 || fret > 35) throw new Error('Cannot convert fret number ' + fret + ' to a single char (expected a value between 0 and 35)')\n    return fret < 10 ? '' + fret : String.fromCharCode('A'.charCodeAt(0) + fret - 10)\n  }\n\n  /**\n   * Convert a single char (digit or capital letter) to a fret number\n   * A means fret 10, 11 fret B, ... and Z fret 35\n   */\n\n  static char2fret (char) {\n    if (typeof char !== 'string') throw new Error('Invalid fret char ' + char + ' expected a string')\n    if (!char.match(/^[0-9A-Z]$/)) throw new Error('Invalid fret char ' + char + ' (expected a value between [0-9] or [A-Z])')\n    return char >= 'A' ? 10 + char.charCodeAt(0) - 'A'.charCodeAt(0) : parseInt(char, 10)\n  }\n\n  /**\n   * Convert an absolute fret number (single char) to a relative fret number (0 never changes)\n   */\n\n  static abs2rel (char, startingFret) {\n    let fret = this.char2fret(char)\n    if (isNaN(fret) || fret < 0) throw new Error('Invalid fret number ' + fret + ' (expected a positive or 0 integer value)')\n    if (fret === 0) return 0\n    if (isNaN(startingFret) || startingFret < 0) throw new Error('Invalid starting fret number ' + startingFret + ' (expected a positive or 0 integer value)')\n    if (startingFret + 8 < fret || startingFret > fret) throw new Error('Fret ' + fret + ' cannot be made relative to starting fret ' + startingFret + ' within the allowed range of 1 to 9')\n    return fret + 1 - startingFret\n  }\n\n  /**\n   * Convert a relative fret number to an absolute fret number (single char) (0 never changes)\n   */\n\n  static rel2abs (relFret, startingFret) {\n    return this.fret2char(relFret ? relFret + startingFret - 1 : relFret)\n  }\n\n  /**\n   * Take a chord and a placeholder contents\n   * Return an array containing one object { string, fret, mute } for each played string\n   */\n\n  static chordStrings (chord, strings) {\n    if (!chord.tablature) throw new Error('Tablature not defined for chord ' + chord.name)\n    if (!chord.fingering) throw new Error('Fingering not defined for chord ' + chord.name)\n\n    var result = []\n    for (var i = 0; i < chord.tablature.length; i++) {\n      // string will be between 6 and 1 since chord.tablature.length has been verified and is 6\n      var string = 6 - i\n\n      // string never played in this chord\n      if (chord.tablature[i] === 'x') continue\n\n      // first time we meet a played string, it's the bass so replace B and B' with the string number\n      strings = strings.replace(/B'/g, (string >= 5 ? string - 1 : string))\n      strings = strings.replace(/B/g, string)\n\n      // check if this string should be played with the right hand\n      // * means \"all strings\", otherwise concatenated specific string numbers are specified (or B for bass or B' for alternate bass)\n      // x after string means muted (ghost) note\n      if (strings.match(/^\\*/) || strings.indexOf(string) !== -1) {\n        let fret = this.char2fret(chord.tablature[i])\n        let xIndex = strings.match(/^\\*/) ? 1 : strings.indexOf(string) + 1\n        let mute = strings[xIndex] === 'x'\n        result.push({\n          string: string,\n          fret: fret,\n          mute: mute\n        })\n      }\n    }\n\n    return result\n  }\n}\n","import { Utils } from './utils'\n\nexport class ParserException {\n  constructor (line, message) {\n    this.message = message\n    this.line = line\n  }\n\n  toString () {\n    return 'Parser error at line ' + this.line + ': ' + this.message\n  }\n}\n\nclass Parser_ {\n  constructor () {\n    this.songcheat = {}\n    this.blocks = {}\n  }\n\n  parse (text) {\n    // reset\n    this.songcheat = {}\n    this.blocks = {}\n\n    // split text into tokens\n    let tokens = this.tokenize(text)\n    if (tokens.length === 0) return this.songcheat\n\n    let tokenIndex = 0\n    while (tokenIndex < tokens.length) {\n      let token = tokens[tokenIndex]\n      let keyword = this.isKeyword(token)\n\n      // we must be on a keyword, otherwise it means that first token in text is not a keyword as expected\n      if (!keyword) throw new ParserException(token.line, 'expected keyword, found \"' + token.value + '\"')\n\n      // get all tokens until next keyword or end\n      let params = []\n      for (++tokenIndex; tokenIndex < tokens.length; ++tokenIndex) {\n        if (this.isKeyword(tokens[tokenIndex])) break\n        params.push(tokens[tokenIndex])\n      }\n\n      // use specific handler if any or default one\n      let handler = this['handle' + Utils.firstUpper(keyword)] || this.handleDefault\n      if (typeof handler === 'function') handler.call(this, token.line, keyword, params)\n      else throw new ParserException(token.line, 'non function handler found for keyword ' + keyword)\n    }\n\n    return this.songcheat\n  }\n\n  getPrecedingKeyword (text, line) {\n    // reset\n    this.songcheat = {}\n    this.blocks = {}\n\n    let lastResult = null\n\n    // split text into tokens\n    let tokens = this.tokenize(text)\n    if (tokens.length === 0) return true\n\n    let tokenIndex = 0\n    while (tokenIndex < tokens.length) {\n      let token = tokens[tokenIndex]\n      let keyword = this.isKeyword(token)\n\n      if (token.line > line) return lastResult\n\n      // we must be on a keyword, otherwise it means that first token in text is not a keyword as expected\n      if (!keyword) throw new ParserException(token.line, 'expected keyword, found \"' + token.value + '\"')\n\n      // get all tokens until next keyword or end\n      let params = []\n      for (++tokenIndex; tokenIndex < tokens.length; ++tokenIndex) {\n        if (this.isKeyword(tokens[tokenIndex])) break\n        params.push(tokens[tokenIndex])\n      }\n\n      // use specific handler if any or default one\n      let handler = this['handle' + Utils.firstUpper(keyword)] || this.handleDefault\n      if (typeof handler === 'function') handler.call(this, token.line, keyword, params)\n      else throw new ParserException(token.line, 'non function handler found for keyword ' + keyword)\n\n      lastResult = { line: token.line, keyword: keyword, params: params, chordIndex: null, rhythmIndex: null, partIndex: null, unitIndex: null }\n\n      if (keyword === 'chord') lastResult.chordIndex = this.songcheat.chords.length - 1\n      else if (keyword === 'rhythm') lastResult.rhythmIndex = this.songcheat.rhythms.length - 1\n      else if (keyword === 'part') lastResult.partIndex = this.songcheat.parts.length - 1\n      else if (keyword === 'structure') {\n        // special case since there is no distinct UNIT keyword for each unit, but a single STRUCTURE keyword for all units\n        let paramIndex = 0\n        for (let param of params) {\n          if (param.line > line) break\n          lastResult.unitIndex = Math.floor(paramIndex / 2)\n          paramIndex++\n        }\n      }\n    }\n\n    return lastResult\n  }\n\n  isKeyword (token) {\n    let keyword = Utils.camelCase(token.value)\n    return ['artist', 'title', 'year', 'difficulty', 'video', 'tutorial', 'comment', 'tuning', 'capo', 'key', 'time', 'tempo', 'shuffle', 'chord', 'rhythm', 'block', 'part', 'lyricsUnit' /* will disappear soon */, 'structure'].indexOf(keyword) >= 0 ? keyword : false\n  }\n\n  tokenize (text) {\n    let tokens = []\n\n    // https://stackoverflow.com/questions/4780728/regex-split-string-preserving-quotes?noredirect=1&lq=1\n    let reSpaces = /(?<=^[^\"]*(?:\"[^\"]*\"[^\"]*)*)[\\s\\t]+(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/\n    let reNewline = /(?<=^[^\"]*(?:\"[^\"]*\"[^\"]*)*)(\\r?\\n)(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/\n\n    let lineNumber = 1\n\n    // split at newlines unless enclosed in quotes\n    for (let line of text.split(reNewline)) {\n      // split also returns the newlines, ignore them\n      if (line.match(/^\\r?\\n$/)) continue\n\n      // trim line\n      line = line.trim()\n\n      // console.log(\"L\" + lineNumber + \": [\"+ line + \"]\");\n\n      // if not a comment or empty line\n      if (line && !line.match(/^#/)) {\n        // split at spaces and tabs unless enclosed in quotes, then trim spaces and quotes\n        for (let value of line.split(reSpaces).map(s => s.trim().replace(/^\"|\"$/g, ''))) tokens.push({ 'value': value, 'line': lineNumber })\n      }\n\n      // increment line number\n      lineNumber += (1 + (line.match(/(?:\\r?\\n)/g) || []).length)\n    }\n\n    return tokens\n  }\n\n  handleDefault (line, keyword, params) {\n    if (params.length !== 1) throw new ParserException(line, keyword.toUpperCase() + ' expected exactly 1 value, but found ' + params.length)\n    this.songcheat[keyword] = ['year', 'capo', 'difficulty'].indexOf(keyword) >= 0 ? parseInt(params[0].value, 10) : params[0].value\n  }\n\n  handleSignature (line, keyword, params) {\n    if (params.length !== 1) throw new ParserException(line, keyword.toUpperCase() + ' expected exactly 1 value, but found ' + params.length)\n    this.songcheat['signature'] = this.songcheat['signature'] || {}\n    this.songcheat['signature'][keyword] = keyword === 'tempo' ? parseFloat(params[0].value, 10) : params[0].value\n  }\n\n  handleKey (line, keyword, params) { return this.handleSignature(line, keyword, params) }\n  handleTempo (line, keyword, params) { return this.handleSignature(line, keyword, params) }\n  handleShuffle (line, keyword, params) { return this.handleSignature(line, keyword, params) }\n\n  handleTime (line, keyword, params) {\n    if (params.length !== 3) throw new ParserException(line, keyword.toUpperCase() + ' expected exactly 3 values, but found ' + params.length)\n    this.songcheat['signature'] = this.songcheat['signature'] || []\n    this.songcheat['signature']['time'] = { 'beatsPerBar': params[1].value, 'beatDuration': params[2].value, 'symbol': params[0].value }\n  }\n\n  handleChord (line, keyword, params) {\n    if (params.length < 2 || params.length > 4) throw new ParserException(line, keyword.toUpperCase() + ' expected between 2 and 4 values (name, tablature[, fingering=\"000000/-\", comment=\"\"]), but found ' + params.length)\n\n    let name = params[0].value\n    let tablature = params[1].value\n    let fingering = params.length >= 3 ? params[2].value : '000000/-'\n    let comment = params.length >= 4 ? params[3].value : ''\n\n    this.songcheat['chords'] = this.songcheat['chords'] || []\n    let chord = { 'id': this.songcheat['chords'].length + 1, 'name': name, 'tablature': tablature, 'fingering': fingering, 'comment': comment }\n    this.songcheat['chords'].push(chord)\n\n    // return created chord (used when meeting an inline chord)\n    return chord\n  }\n\n  handleRhythm (line, keyword, params) {\n    if (params.length !== 2) throw new ParserException(line, keyword.toUpperCase() + ' expected exactly 2 values (id and score), but found ' + params.length)\n    this.songcheat['rhythms'] = this.songcheat['rhythms'] || []\n    this.songcheat['rhythms'].push({ 'id': this.songcheat['rhythms'].length + 1, 'name': params[0].value, 'score': params[1].value })\n  }\n\n  handleBlock (line, keyword, params) {\n    if (params.length < 2) throw new ParserException(line, keyword.toUpperCase() + ' expected at least 2 values (name and bar(s)), but found ' + params.length)\n    this.blocks[params[0].value] = params.slice(1)\n  }\n\n  handlePart (line, keyword, params) {\n    if (params.length < 2) throw new ParserException(line, keyword.toUpperCase() + ' expected at least 2 values (name and bar(s)), but found ' + params.length)\n    this.songcheat['parts'] = this.songcheat['parts'] || []\n\n    // extract part name from params\n    let part = { 'id': this.songcheat['parts'].length + 1, 'name': params[0].value, 'phrases': [] }\n    params = params.splice(1)\n    this.songcheat['parts'].push(part)\n\n    // iterate on remaining params to get bars and phrases\n    let bars = []\n    for (let pIndex = 0; pIndex < params.length; pIndex++) {\n      let param = params[pIndex]\n\n      // phrase separator\n      if (param.value === '||') {\n        part.phrases.push({ 'bars': bars })\n        bars = []\n        continue\n      }\n\n      // bar repeater\n      if (param.value === '%') {\n        if (bars.length === 0) throw new ParserException(param.line, 'found bar repeater ' + param.value + ' but there is no bar yet in phrase')\n        bars.push(JSON.parse(JSON.stringify(bars[bars.length - 1])))\n        continue\n      }\n\n      // bar between []\n      if (param.value.match(/^\\[[^[\\]]+\\]$/)) {\n        let bar = { 'rhythm': null, 'chords': [] }\n        let str = param.value.substr(1, param.value.length - 2)\n        let parts = str.split(/\\*|:/)\n\n        // find rhythm\n        let found = false\n        for (let rhythm of this.songcheat['rhythms']) {\n          if (rhythm.name === parts[0]) {\n            bar.rhythm = rhythm.id\n            found = true\n            break\n          }\n        }\n\n        if (!found) throw new ParserException(param.line, parts[0] + ' is not the name of an existing rhythm')\n\n        // find chords\n        parts = parts.slice(1)\n        for (let part of parts) {\n          // chord repeater\n          if (!part.trim()) {\n            if (bar.chords.length === 0) throw new ParserException(param.line, 'found chord repeater but there is no chord yet in bar')\n            bar.chords.push(JSON.parse(JSON.stringify(bar.chords[bar.chords.length - 1])))\n            continue\n          }\n\n          // search for chord by its name\n          let found = false\n          for (let chord of this.songcheat['chords']) {\n            if (chord.name === part) {\n              bar.chords.push(chord.id)\n              found = true\n              break\n            }\n          }\n\n          // if no chord found with this name but this is a valid chord tablature (with an optional barred fret /[-0-9A-Z])\n          if (!found && part.match(/^[x0-9A-Z]{6}(\\/[-0-9A-Z])?$/)) {\n            // create inline chord with the name being the tablature itself, and no fingering nor comment\n            let chord = this.handleChord(param.line, 'chord', [{ value: part, line: param.line }, { value: part.split('/')[0], line: param.line }, { value: '000000/' + (part.split('/')[1] || '-'), line: param.line }])\n            bar.chords.push(chord.id)\n            found = true\n          }\n\n          if (!found) throw new ParserException(param.line, part + ' is not the name of an existing chord and is not a valid chord tablature')\n        }\n\n        bars.push(bar)\n        continue\n      }\n\n      // not a || phrase separator nor a [] bar: must be a block name\n      if (!this.blocks[param.value]) throw new ParserException(param.line, param.value + ' is not the name of an existing block')\n\n      // insert block tokens in params at current position\n      let args = [pIndex, 1]\n      Array.prototype.push.apply(args, this.blocks[param.value])\n      Array.prototype.splice.apply(params, args)\n      pIndex--\n    }\n\n    // end of last phrase\n    if (bars.length > 0) part.phrases.push({ 'bars': bars })\n  }\n\n  handleStructure (line, keyword, params) {\n    if (params.length < 2) throw new ParserException(line, keyword.toUpperCase() + ' expected at least 2 values (part name and lyrics), but found ' + params.length)\n    if (params.length % 2 !== 0) throw new ParserException(line, keyword.toUpperCase() + ' expected an even number of parameters (N x part name and lyrics), but found ' + params.length)\n    this.songcheat['structure'] = this.songcheat['structure'] || []\n\n    for (let pIndex = 0; pIndex < params.length; pIndex += 2) {\n      let param = params[pIndex]\n\n      let found = false\n      for (let part of this.songcheat['parts']) {\n        if (part.name === param.value) {\n          this.songcheat['structure'].push({ 'id': this.songcheat['structure'].length + 1, 'part': part.id, 'lyrics': params[pIndex + 1].value })\n          found = true\n          break\n        }\n      }\n\n      if (!found) throw new ParserException(param.line, param.value + '\" is not the name of an existing part')\n    }\n  }\n}\n\n/**\n * Public API\n */\n\nexport class Parser {\n  constructor () {\n    this.parser_ = new Parser_()\n  }\n\n  parse (songcheat) {\n    console.log('Parsing songcheat...')\n    return this.parser_.parse(songcheat)\n  }\n\n  getPrecedingKeyword (songcheat, line) {\n    return this.parser_.getPrecedingKeyword(songcheat, line)\n  }\n}\n","import { Utils } from './utils'\n\nexport class CompilerException {\n  constructor (message) {\n    this.message = message\n  }\n\n  toString () {\n    return 'Compiler error: ' + this.message\n  }\n}\n\nclass Compiler_ {\n  constructor (DEBUG) {\n    this.DEBUG = DEBUG\n  }\n\n  log () {\n    if (this.DEBUG > 0) console.log.apply(console, arguments)\n  }\n\n  compile (songcheat) {\n    // default values for optional properties\n    songcheat.mode = songcheat.mode || 'rt'\n    songcheat.lyricsMode = songcheat.lyricsMode || 's'\n    songcheat.barsPerLine = songcheat.barsPerLine || 4\n    songcheat.signature = songcheat.signature || {}\n    songcheat.signature.key = songcheat.signature.key || 'C'\n    songcheat.signature.time = songcheat.signature.time || { beatDuration: ':q', beatsPerBar: 4, symbol: '4/4' }\n    songcheat.lyricsUnit = songcheat.lyricsUnit || songcheat.signature.time.beatDuration\n    songcheat.chords = songcheat.chords || []\n    songcheat.rhythms = songcheat.rhythms || []\n    songcheat.parts = songcheat.parts || []\n\n    // deduce bar duration from signature\n    songcheat.barDuration = songcheat.signature.time.beatsPerBar * Utils.duration(songcheat.signature.time.beatDuration)\n\n    // resolve all id references (rhythms and chords)\n    this.resolveIds(songcheat)\n\n    // default structure if not specified : one unit for each part\n    if (!songcheat.structure) {\n      songcheat.structure = []\n      for (let part of songcheat.parts) songcheat.structure.push({ 'part': part })\n    }\n\n    // give a name to each unit if not already set = name of part with automatic numbering\n    let unitsByPart = {}\n    let numberByPart = {}\n    for (let unit of songcheat.structure) unitsByPart[unit.part.id] = typeof unitsByPart[unit.part.id] === 'undefined' ? 1 : unitsByPart[unit.part.id] + 1\n    for (let unit of songcheat.structure) {\n      numberByPart[unit.part.id] = typeof numberByPart[unit.part.id] === 'undefined' ? 1 : numberByPart[unit.part.id] + 1\n      if (!unit.name) unit.name = unit.part.name + (unitsByPart[unit.part.id] > 1 ? ' ' + numberByPart[unit.part.id] : '')\n    }\n\n    // give a color to each part if not already set\n    let colors = ['red', '#06D6A0', 'blue', 'purple', 'orange', 'magenta']\n    let partIndex = 0\n    for (let part of songcheat.parts) { if (!part.color) part.color = colors[partIndex++ % colors.length] }\n\n    // validate and compile each rhythm\n    for (let rhythm of songcheat.rhythms) this.compileRhythm(rhythm, songcheat.signature.time.beatDuration)\n\n    for (let part of songcheat.parts) {\n      // compute a \"chordChanges\" property in each phrase\n      let phraseIndex = 0\n      for (let phrase of part.phrases) {\n        phrase.chordChanges = []\n        let lastChord = null\n        for (let bar of phrase.bars) lastChord = this.addChordChanges(bar, phrase.chordChanges, songcheat.barDuration, false, lastChord)\n\n        this.log('Phrase wise chord durations for phrase ' + part.name + '.' + (phraseIndex + 1))\n        for (let c of phrase.chordChanges) this.log('\\t[' + c.chord.name + '] = ' + c.duration + ' units')\n\n        // compute a \"chordChanges\" property in each bar\n        let barIndex = 0\n        for (let bar of phrase.bars) {\n          bar.chordChanges = { 'bar': [], 'rhythm': [] }\n          for (let chordChangesMode of ['rhythm', 'bar']) this.addChordChanges(bar, bar.chordChanges[chordChangesMode], songcheat.barDuration, chordChangesMode === 'bar')\n\n          this.log('\\tRythm wise chord durations for bar ' + part.name + '.' + (phraseIndex + 1) + '.' + (barIndex + 1))\n          for (let c of bar.chordChanges['rhythm']) this.log('\\t\\t[' + c.chord.name + '] = ' + c.duration + ' units')\n          this.log('\\tBar wise chord durations for bar ' + part.name + '.' + (phraseIndex + 1) + '.' + (barIndex + 1))\n          for (let c of bar.chordChanges['bar']) this.log('\\t\\t[' + c.chord.name + '] = ' + c.duration + ' units')\n\n          barIndex++\n        }\n\n        phraseIndex++\n      }\n\n      // compute duration of part\n      part.duration = 0\n      for (let phrase of part.phrases) { for (let bar of phrase.bars) part.duration += bar.rhythm.duration }\n    }\n\n    // fluid API\n    return songcheat\n  }\n\n  resolveIds (songcheat) {\n    let unitIndex = 0\n    if (songcheat.structure) {\n      for (let unit of songcheat.structure) {\n        if (!unit.part) throw new CompilerException('Part not defined for unit ' + (unitIndex + 1))\n\n        // resolve part id\n        let part = this.resolveId(songcheat.parts, unit.part)\n        if (!part) throw new CompilerException('Part ' + unit.part + ' not found')\n        unit.part = part\n\n        unitIndex++\n      }\n    }\n\n    if (songcheat.parts) {\n      for (let part of songcheat.parts) {\n        if (!part.phrases) throw new CompilerException('Phrases not defined for part \"' + part.name + '\"')\n        if (!(part.phrases instanceof Array)) throw new CompilerException('Phrases defined for part \"' + part.name + '\" must be an Array, found: ' + (typeof songcheat.parts.phrases))\n\n        let phraseIndex = 0\n        for (let phrase of part.phrases) {\n          let barIndex = 0\n          for (let bar of phrase.bars) {\n            if (!bar.rhythm) throw new CompilerException('Rhythm not defined for bar ' + (barIndex + 1) + ' of phrase ' + (phraseIndex + 1) + ' of ' + part.name)\n            if (!bar.chords) throw new CompilerException('Chords not defined for bar ' + (barIndex + 1) + ' of phrase ' + (phraseIndex + 1) + ' of ' + part.name)\n            if (!(bar.chords instanceof Array)) throw new CompilerException('Chords defined for bar ' + (barIndex + 1) + ' of phrase ' + (phraseIndex + 1) + ' must be an Array, found: ' + (typeof bar.chords))\n\n            // resolve rhythm id\n            let rhythm = this.resolveId(songcheat.rhythms, bar.rhythm)\n            if (!rhythm) throw new CompilerException('Rhythm ' + bar.rhythm + ' not found for bar ' + (barIndex + 1) + ' of phrase ' + (phraseIndex + 1))\n            bar.rhythm = rhythm\n\n            // resolved array of chord ids\n            let chords = []\n            for (let chordId of bar.chords) {\n              // resolve chord id\n              let chord = this.resolveId(songcheat.chords, chordId)\n              if (!chord) throw new CompilerException('Chord ' + chordId + ' not found for bar ' + (barIndex + 1) + ' of phrase ' + (phraseIndex + 1))\n              chords.push(chord)\n            }\n\n            bar.chords = chords\n            barIndex++\n          }\n\n          phraseIndex++\n        }\n      }\n    }\n  }\n\n  resolveId (collection, id) {\n    if (collection) { for (let i of collection) { if (i.id === id) return i } }\n    return null\n  }\n\n  compileRhythm (rhythm, initialNoteDuration) {\n    this.log('Compiling rhythm ' + rhythm.id + ' with score \"' + rhythm.score + '\"')\n\n    // default note duration, until changed\n    let noteDuration = initialNoteDuration\n\n    // take not of each placeholder's index, so we can later fetch the associated chord\n    rhythm.placeholdercount = 0\n\n    // for locating syntax errors in message\n    let position = 1\n    let lastToken = null\n\n    // compile the score string into an array of objects\n    rhythm.compiledScore = []\n    for (let token of rhythm.score.split(/((?::(?:w|h|q|8|16|32)d?)|\\(#\\)|T?\\s*\\([^(]*\\)[^()\\sT:]*)/)) {\n      if ((token = token.trim())) {\n        let match = null\n        if ((match = token.match(/^(:(?:w|h|q|8|16|32)d?)$/))) {\n          // duration: change note duration to use next\n          noteDuration = Utils.duration(match[1])\n        } else if ((match = token.match(/^\\(#\\)$/))) {\n          // rest\n          rhythm.compiledScore.push({ rest: true, duration: noteDuration, tied: false, strings: false, flags: {}, placeholderIndex: rhythm.placeholdercount++ })\n        } else if ((match = token.match(/^(T?)\\s*\\(([^(]*)\\)([^()\\s]*)$/))) {\n          // chord placeholder\n          let tied = match[1] === 'T'\n\n          // strings = between parentheses\n          let strings = match[2]\n          if (strings === '') strings = '*' // an empty string is a shortcut for \"*\"\n          if (strings === 'x') strings = '*x' // a x alone is a shortcut for \"*x\"\n          if (!strings.match(/^(?:(\\*x?)|((?:(?:B|B'|1|2|3|4|5|6)x?)+))$/)) throw new CompilerException('Invalid syntax found in chord placeholder: ' + strings)\n\n          // flags = after parentheses\n          let flagsString = match[3]\n          let flags = { stroke: null, accent: false, pm: false, fingering: null }\n          for (let flag of flagsString.split(/(dd?|uu?|>|PM|[pima]+)/)) {\n            if (flag.trim()) {\n              if (flag.match(/^(dd?|uu?)$/g)) {\n                // stroke mode\n                if (flags.fingering) throw new CompilerException('Fingering (' + flags.fingering + ') and stroke (' + flag + ') cannot be both defined for the chord placeholder: ' + token)\n                if (flags.pm) throw new CompilerException('Palm muting (PM) and stroke (' + flag + ') cannot be both defined for the chord placeholder: ' + token)\n                if (flags.stroke) throw new CompilerException('More than one stroke mode (d, u, dd, uu) defined for the chord placeholder: ' + token)\n                flags.stroke = flag\n              } else if (flag.match(/^[pima]+$/)) {\n                // PIMA fingering\n                if (flags.stroke) throw new CompilerException('Stroke (' + flags.stroke + ') and fingering (' + flag + ') cannot be both defined for the chord placeholder: ' + token)\n                if (flags.pm) throw new CompilerException('Palm muting (PM) and fingering (' + flag + ') cannot be both defined for the chord placeholder: ' + token)\n                if (flags.fingering) throw new CompilerException('More than one fingering (pima) defined for the chord placeholder: ' + token)\n                flags.fingering = flag\n              } else if (flag.match(/^PM$/)) {\n                // palm muting\n                if (flags.stroke) throw new CompilerException('Stroke (' + flags.stroke + ') and palm muting (' + flag + ') cannot be both defined for the chord placeholder: ' + token)\n                if (flags.fingering) throw new CompilerException('Fingering (' + flags.fingering + ') and palm muting (' + flag + ') cannot be both defined for the chord placeholder: ' + token)\n                if (flags.pm) throw new CompilerException('More than one palm muting (PM) defined for the chord placeholder: ' + token)\n                flags.pm = true\n              } else if (flag.match(/^>$/)) {\n                // accent\n                if (flags.accent) throw new CompilerException('More than one accent (>) defined for the same placeholder: ' + token)\n                flags.accent = true\n              } else throw new CompilerException('Invalid flag \"' + flag + '\" defined for chord placeholder \"' + token + '\"')\n            }\n          }\n\n          // add a note\n          rhythm.compiledScore.push({ rest: false, duration: noteDuration, tied: tied, strings: strings, flags: flags, placeholderIndex: rhythm.placeholdercount++ })\n        } else throw new CompilerException('Invalid token \"' + token + '\" in rhythm score definition at position ' + position + (lastToken ? ' (after \"' + lastToken + '\")' : ''))\n\n        lastToken = token\n      }\n\n      position += token.length\n    }\n\n    // compute total rhythm duration\n    rhythm.duration = 0\n    for (let o of rhythm.compiledScore) rhythm.duration += o.duration\n  }\n\n  addChordChanges (bar, chordChanges, barDuration, resetAtBars, lastChord) {\n    // ensure number of chords match number of placeholders in rhythm score, by repeating last chord\n    if (bar.chords.length < 1) throw new CompilerException('chords must contain at least 1 entry, but ' + bar.chords.length + ' were found')\n    while (bar.chords.length < bar.rhythm.placeholdercount) bar.chords.push(bar.chords[bar.chords.length - 1])\n\n    let offset = 0\n    for (let note of bar.rhythm.compiledScore) {\n      // get chord corresponding to the placeholder position\n      let chord = bar.chords[note.placeholderIndex]\n      if (!chord) throw new CompilerException('No chord found for placeholder ' + (note.placeholderIndex + 1))\n\n      // same chord as before and not a new bar: increment duration with this new note\n      if (lastChord === chord && offset % barDuration !== 0) chordChanges[chordChanges.length - 1].duration += note.duration\n\n      // chord changed: new duration starts with one note of the new chord\n      // unless requested to reset chords at bars, chord change will be hidden if still the same as before\n      else chordChanges.push({ chord: chord, duration: note.duration, hidden: lastChord === chord && !resetAtBars })\n\n      lastChord = chord\n      offset += note.duration\n    }\n\n    return lastChord\n  }\n}\n\n/**\n * Public API\n */\n\nexport class Compiler {\n  constructor (DEBUG) {\n    this.compiler_ = new Compiler_(DEBUG)\n  }\n\n  compile (songcheat) {\n    console.log(Utils.title('COMPILE SONGCHEAT'))\n    return this.compiler_.compile(JSON.parse(JSON.stringify(songcheat)))\n  }\n}\n","import { Utils } from './utils'\n\nlet MIN_LYRICS_BARLEN = 20 // minimum length of a bar lyrics (before reducing) - not really needed but produces a clearer view when maxConsecutiveSpaces set to 0 (and thus when displaying parts with partdisplay=full) since bars with no or little text will have the same length (unless there are really many chord changes...)\nlet LYRICS_SUM_DURATIONS = false // if true \"::\" is equivalent to \":h:\" (assuming lyrics unit is :q)\nlet KEEP_EMPTY_LINES = false\n\nexport class LyricsException {\n  constructor (message) {\n    this.message = message\n  }\n\n  toString () {\n    return 'Lyrics error: ' + this.message\n  }\n}\n\nclass Lyrics_ {\n  constructor (DEBUG) {\n    // DEBUG 1 forces showing . * | characters in unit text (even if showDots is passed false) as well as _ for groups that were automatically created when crossing a bar\n    this.DEBUG = DEBUG\n  }\n\n  log () {\n    if (this.DEBUG > 0) console.log.apply(console, arguments)\n  }\n\n  parseLyrics (unit, defaultCursorStep, barDuration) {\n    let warnings = []\n    let offset = 0\n\n    // remove DOS newlines\n    unit.lyrics = (unit.lyrics || '').replace(/\\r/g, '')\n\n    // split lyrics into word groups, split occurs at cursor forward instructions (colons, durations and bars)\n    unit.groups = []\n    for (let part of unit.lyrics.split(/((?::(?:w|h|q|8|16|32)d?)?:|\\|)/)) { // nb: split with capture groups only works in decent browsers, e.g. IE10+\n      let match = null\n      // move cursor forward by given or default step duration\n      if ((match = part.match(/(:(?:w|h|q|8|16|32)d?)?:/))) offset = this.registerGroup(unit, offset, match[1] ? Utils.duration(match[1]) : defaultCursorStep, barDuration)\n\n      // move cursor to begin of next bar\n      else if (part.match(/\\|/)) offset = this.registerGroup(unit, offset, barDuration - (offset % barDuration), barDuration)\n\n      // (non empty) word group (waiting for its duration)\n      else if (part.length > 0) unit.groups.push({ text: part, offset: offset, duration: 0 })\n    }\n\n    // simulate a final bar if last group still open (no duration), i.e. if lyrics do not end on a : or |\n    if (unit.groups.length && unit.groups[unit.groups.length - 1].duration === 0) offset = this.registerGroup(unit, offset, barDuration - (offset % barDuration), barDuration)\n\n    // get missing duration and complete with empty groups if needed (offset now contains the total duration of all groups)\n    let missingDuration = unit.part.duration - offset\n    this.log('[' + unit.name + '] Missing duration = ' + missingDuration + ' units (' + unit.part.duration + ' - ' + offset + ') = ' + (missingDuration / barDuration) + ' bars missing')\n    if (missingDuration < 0) warnings.push('Lyrics contain ' + Math.floor(-missingDuration / barDuration) + ' bar(s)' + (-missingDuration % barDuration ? ' and ' + Utils.durationcodes(-missingDuration % barDuration) : '') + ' in excess')\n    offset = this.registerGroup(unit, offset, missingDuration, barDuration)\n\n    for (let group of unit.groups) {\n      // compute length of group (in chars), adding 1 so the group having max density is not collated with next group\n      let groupLength = this.getGroupLength(group) + 1\n\n      // ensure the bar will always have the required minimal width\n      group.plen = Math.max(groupLength, Math.ceil(MIN_LYRICS_BARLEN * group.duration / barDuration))\n\n      // compute density of group based on the obtained length\n      group.p = group.plen / group.duration\n\n      // set bar true if group ends on a bar\n      group.bar = (group.offset + group.duration) % barDuration === 0\n\n      // initialize chord changes\n      group.chordChanges = { 'bar': [], 'rhythm': [], 'phrase': [] }\n    }\n\n    // compute maximum density across all groups\n    unit.pmax = 0\n    for (let group of unit.groups) unit.pmax = Math.max(unit.pmax, group.p)\n\n    // iterate on each phrase wise chord change and find the associated group\n    offset = 0\n    for (let phrase of unit.part.phrases) {\n      for (let chordDuration of phrase.chordChanges) {\n        // find closest group starting at or before chord offset\n        let group = null\n        for (let g of unit.groups) { if (g.offset <= offset) group = g }\n        if (!group) throw new Error('No closest group found for chord ' + chordDuration.chord.name + ' with offset ' + offset + ' units')\n\n        // register chord change in group\n        group.chordChanges['phrase'].push({ offset: offset, text: this.getChordDisplay(chordDuration) })\n\n        offset += chordDuration.duration\n      }\n    }\n\n    // iterate on each bar wise chord change and find the associated group\n    offset = { 'rhythm': 0, 'bar': 0 }\n    for (let phrase of unit.part.phrases) {\n      for (let bar of phrase.bars) {\n        for (let chordChangesMode of ['rhythm', 'bar']) {\n          for (let chordDuration of bar.chordChanges[chordChangesMode]) {\n            // find closest group starting at or before chord offset\n            let group = null\n            for (let g of unit.groups) { if (g.offset <= offset[chordChangesMode]) group = g }\n            if (!group) throw new Error('No closest group found for chord ' + chordDuration.chord.name + ' with offset ' + offset[chordChangesMode] + ' units')\n\n            // register chord change in group\n            group.chordChanges[chordChangesMode].push({ offset: offset[chordChangesMode], text: this.getChordDisplay(chordDuration) })\n\n            offset[chordChangesMode] += chordDuration.duration\n          }\n        }\n      }\n    }\n\n    // debug info\n    var debugText = 'Groups of unit [' + unit.name + ']:\\n'\n    var barIndex = 0\n    let zeroDuration = false\n    for (let group of unit.groups) {\n      debugText += '\\tBar ' + (barIndex + 1) + '\\t[' + group.text.replace(/\\n/g, '\\\\N') + ']:' + group.duration + ' (' + group.offset + ' - ' + (group.offset + group.duration) + ') L=' + this.getGroupLength(group) + \" L'=\" + group.plen + ' ρ=' + group.p.toFixed(2) + ' #Chord changes %bar= ' + group.chordChanges['bar'].length + ' %phrase= ' + group.chordChanges['phrase'].length\n      if (group.duration === 0) zeroDuration = true\n      if (group.bar) {\n        barIndex++\n        debugText += ' | '\n      }\n      debugText += '\\n'\n    }\n    debugText += 'ρ max = ' + unit.pmax.toFixed(2)\n    this.log(debugText)\n\n    if (zeroDuration) throw new Error('Detected group with 0 duration')\n\n    return warnings\n  }\n\n  getUnitText (unit, maxConsecutiveSpaces, split, chordChangesMode, showDots) {\n    var unitText = ''\n\n    // concatenate lyrics groups, giving them a number of positions proprtional to their duration\n    var barIndex = 0\n    var groupIndex = 0\n    for (let group of unit.groups) {\n      // where and on how many positions will this group be displayed\n      group.position = [...unitText.replace(/\\n/g, '')].length\n      group.length = Math.ceil(group.duration * unit.pmax)\n\n      // an hyphen means a word has been cut in two, no need for a space before next group\n      // but if the final character should be a bar, then always count this extra character\n      let needFinalSpace = group.bar || !group.text.match(/-$/)\n\n      // if maxConsecutiveSpaces is set, set a maximum for the number of allowed positions if needed\n      let maxLength = null\n      if (maxConsecutiveSpaces > 0) maxLength = this.getGroupLength(group) + maxConsecutiveSpaces - (needFinalSpace ? 0 : 1)\n      if (maxLength) group.length = Math.min(group.length, maxLength)\n\n      // but if group has associated chords, we must have enough space for them (and this has priority over maxConsecutiveSpaces)\n      let minLength = group.bar ? 1 : 0 // 1 for the final bar sign if any\n      if (group.chordChanges[chordChangesMode]) { for (let i = 0; i < group.chordChanges[chordChangesMode].length; i++) minLength += group.chordChanges[chordChangesMode][i].text.length }\n      minLength = Math.max(this.getGroupLength(group) + (needFinalSpace ? 1 : 0), minLength)\n      group.length = Math.max(group.length, minLength)\n\n      // filler string used to reach that length (nb: filler will always have a length of at least 1)\n      let filler = Utils.spaces(group.length - this.getGroupLength(group), showDots || this.DEBUG ? '.' : ' ')\n\n      // replace last character of filler by a | if this is the end of a bar\n      filler = filler.replace(/(.)$/, group.bar ? (split > 0 && ((barIndex + 1) % split === 0) ? '|\\n' : '|') : (this.DEBUG ? '*' : '$1'))\n\n      // append filler to text, remove new lines if splitting at bars\n      var groupText = (split > 0 ? group.text.replace(/\\n/g, '') : group.text) + filler\n\n      this.log('[' + unit.name + '] Display group ' + (groupIndex + 1) + ' \"' + groupText.replace(/\\n/g, '\\\\N') + '\" on ' + group.length + ' chars (CEIL ' + (group.duration * unit.pmax).toFixed(2) + ' MIN ' + minLength + ' MAX ' + (maxLength || 'n/a') + ')')\n      unitText += groupText\n\n      groupIndex++\n      if (group.bar) barIndex++\n    }\n\n    // we weren't asked to add chords\n    if (!chordChangesMode) return unitText\n\n    // build chord inserts, based on bar or phrase wise changes, each with the text and position where to insert\n    let chordInserts = []\n    for (let group of unit.groups) {\n      let lengthStillToPlaceOnThisGroup = 0\n      let lengthYetPlacedOnThisGroup = 0\n\n      // compute length of all chord inserts\n      for (let chordChange of group.chordChanges[chordChangesMode]) lengthStillToPlaceOnThisGroup += chordChange.text.length\n\n      for (let chordChange of group.chordChanges[chordChangesMode]) {\n        // position of the chord will be the position of the group + length corresponding to offset delta\n        let positionDelta = Math.ceil(((chordChange.offset - group.offset) / group.duration) * group.length)\n        let positionDelta_ = positionDelta\n\n        // ensure that chord name will not cross end of group it belongs to (last char of group must not be overwritten either if it is a bar)\n        while (positionDelta + lengthStillToPlaceOnThisGroup > group.length - (group.bar ? 1 : 0)) { positionDelta-- }\n\n        // ensure that chords already there still have enough room\n        while (positionDelta - lengthYetPlacedOnThisGroup < 0) { positionDelta++ }\n\n        this.log('Closest group \"' + group.text.replace(/\\n/g, '\\\\n') + '\" with offset ' + group.offset + ' and position ' + group.position + ' found for ' + chordChange.text.trim() + ' with offset ' + chordChange.offset + ' units\\n\\tposition delta from group start = ' + positionDelta + ' chars (initially ' + positionDelta_ + ' chars)')\n        chordInserts.push({ text: chordChange.text, offset: chordChange.offset, position: group.position + positionDelta })\n\n        lengthYetPlacedOnThisGroup = positionDelta + chordChange.text.length\n        lengthStillToPlaceOnThisGroup -= chordChange.text.length\n      }\n    }\n\n    for (let chordInsert of chordInserts) this.log('[' + unit.name + '] Should insert ' + chordInsert.text + ' @ ' + chordInsert.offset + ' units / ' + chordInsert.position + ' chars')\n\n    // insert these chord inserts\n    let position = 0\n    let skip = 0\n    let unitText_ = unitText\n    let chordText = ''\n    unitText = ''\n    for (let char of unitText_) {\n      if (char === '\\n') {\n        unitText += '\\n'\n        chordText += '\\n'\n        skip = 0\n      } else {\n        for (let chordInsert of chordInserts) {\n          if (!chordInsert.inserted) {\n            if (chordInsert.position <= position) {\n              this.log('[' + unit.name + '] Inserting ' + chordInsert.text + ' @ ' + position + ' chars')\n              chordText += chordInsert.text\n              chordInsert.inserted = true\n              skip = chordInsert.text.length\n            }\n          }\n        }\n\n        position++\n\n        // add char to unit text, and corresponding space to chord text\n        // only bar symbols are added in chord text instead of unit text (if showing dots, then bars are displayed in both texts)\n        if (skip === 0) { chordText += char === '|' ? char : ' ' } else { skip-- }\n        unitText += char === '|' && !(showDots || this.DEBUG) ? ' ' : char\n      }\n    }\n\n    // and interlace the two strings\n    return Utils.interlace(chordText, unitText, null, KEEP_EMPTY_LINES)\n  }\n\n  registerGroup (unit, offset, step, barDuration) {\n    if (!barDuration) throw new Error('Invalid bar duration passed to registerGroup')\n\n    while (step > 0) {\n      // duration added to preceding group may never be more than what's left until end of bar\n      let addDuration = Math.min(step, barDuration - (offset % barDuration))\n\n      // create a new group if none or if preceding already got its duration\n      if (!unit.groups.length || (!LYRICS_SUM_DURATIONS && unit.groups[unit.groups.length - 1].duration > 0)) unit.groups.push({ text: '', offset: offset, duration: 0 })\n\n      // add this duration to preceding group (create it if needed)\n      unit.groups[unit.groups.length - 1].duration += addDuration\n      offset += addDuration\n      step -= addDuration\n\n      // step is going to cross end of bar: directly create a first empty group\n      if (step > 0) unit.groups.push({ text: this.DEBUG > 1 ? '_' : '', offset: offset, duration: 0 })\n    }\n\n    return offset\n  }\n\n  getGroupLength (group) {\n    // return the number of visible graphemes in group text\n    // - newlines are not counted\n    // - tabs will be converted to spaces and may thus count as 1\n    // - use spread operator to correctly count astral unicode symbols\n    return [...group.text.replace(/\\n/g, '')].length\n  }\n\n  getChordDisplay (chordDuration) {\n    // space and not empty if hidden, to ensure that a white space will show that this change does not happen at the begin of the bar\n    if (chordDuration.hidden) return ' '\n\n    // a space prevents chord names to be glued together on group and prevents a next group from starting directly after last chord of previous group\n    return chordDuration.chord.name + ' '\n  }\n}\n\n/**\n * Public API\n */\n\nexport class Lyrics {\n  constructor (songcheat, DEBUG) {\n    this.lyrics_ = new Lyrics_(DEBUG)\n    this.songcheat = songcheat\n  }\n\n  parseLyrics (unit) {\n    console.log(Utils.title('PARSE LYRICS ' + unit.name))\n    return this.lyrics_.parseLyrics(unit, Utils.duration(this.songcheat.lyricsUnit), this.songcheat.barDuration)\n  }\n\n  getUnitText (unit, maxConsecutiveSpaces, split, chordChangesMode, showDots) {\n    console.log(Utils.title(`GET LYRICS TEXT ${unit.name} (maxConsecutiveSpaces = ${maxConsecutiveSpaces}, split = ${split}, chordChangesMode = ${chordChangesMode}, showDots = ${showDots})`))\n    return this.lyrics_.getUnitText(unit, maxConsecutiveSpaces, split, chordChangesMode, showDots)\n  }\n\n  getPartText (part, maxConsecutiveSpaces, split, chordChangesMode, showDots) {\n    // dummy unit with no lyrics\n    let unit = { name: part.name, part: part }\n\n    console.log(Utils.title('PARSE PART LYRICS ' + unit.name))\n    this.lyrics_.parseLyrics(unit, Utils.duration(this.songcheat.lyricsUnit), this.songcheat.barDuration)\n\n    console.log(Utils.title(`GET PART LYRICS TEXT ${unit.name} (maxConsecutiveSpaces = ${maxConsecutiveSpaces}, split = ${split}, chordChangesMode = ${chordChangesMode}, showDots = ${showDots})`))\n    return this.lyrics_.getUnitText(unit, maxConsecutiveSpaces, split, chordChangesMode, showDots)\n  }\n}\n","import { Utils } from './utils'\n\nexport class ChordPixException {\n  constructor (message) {\n    this.message = message\n  }\n\n  toString () {\n    return 'Chordpix error: ' + this.message\n  }\n}\n\nexport class ChordPix {\n  static parse (url) {\n    try {\n      // validate and explode url at slashes\n      if (!url.match(/https?:\\/\\/chordpix.com\\/i\\/[0-9]+\\/6\\/[0-9]+\\/[0-9]+\\/[x0-6]{6}\\/[T0-4]{6}\\/(-|[0-9]+)\\/.+\\..+/)) throw new ChordPixException('Invalid ChordPix image URL')\n      let parts = url.split(/\\//)\n\n      // get chord name replacing ♯ with # and ♭ with b so that chord names can be easily typed in songcheat text file\n      let name = parts[11].split('.')[0].replace(/♯/g, '#').replace(/♭/g, 'b')\n\n      // get starting fret\n      let startingFret = parseInt(parts[7], 10)\n\n      // get absolute barred fret (single char) (\"-\" kept as is)\n      let barredFret = parts[10] === '-' ? parts[10] : Utils.rel2abs(parseInt(parts[10], 10), startingFret)\n\n      // build an absolute tablature (single char x6) (\"x\" kept as is)\n      let tablature = ''\n      for (let char of parts[8]) tablature += char === 'x' ? char : Utils.rel2abs(parseInt(char, 10), startingFret)\n\n      return {\n        name: name,\n        tablature: tablature,\n        fingering: parts[9] + '/' + barredFret,\n        comment: ''\n      }\n    } catch (e) {\n      throw new ChordPixException('[URL ' + url + '] ' + e.message)\n    }\n  }\n\n  static url (chord, chordWidth) {\n    try {\n      // check tablature is valid\n      if (typeof chord.tablature !== 'string') throw new Error('chord.tablature must be a string')\n      if (chord.tablature.length !== 6) throw new Error('chord.tablature must be exactly 6 characters long (one for each guitar string)')\n      if (!chord.tablature.match(/^[x0-9A-Z]{6}$/)) throw new Error('chord.tablature must contain only digits and capital letters (representing a fret number), or \"x\" (for mute)')\n\n      // check fingering is valid\n      if (typeof chord.fingering !== 'string') throw new Error('chord.fingering must be a string')\n      if (chord.fingering.length !== 8) throw new Error('chord.fingering must be exactly 8 characters long (....../.)')\n      if (!chord.fingering.match(/^[PT01234]{6}.*$/)) throw new Error('the first 6 characters of chord.fingering can only be P,T,1,2,3,4 or 0 (each character represents a finger)')\n      if (!chord.fingering.match(/^[PT01234]{6}\\/[-0-9A-Z]$/)) throw new Error('the last 2 characters of chord.fingering must be a \"/\" followed by a digit or capital letter (representing the number of the barred fret) or \"-\" if there is no barred fret')\n\n      // convert 6 chars into 6 integers (null for x)\n      let frets = []\n      for (let char of chord.tablature) frets.push(char === 'x' ? null : Utils.char2fret(char))\n\n      // get max and min fret (excluding null and 0), use 1 if chord has no frets at all\n      let minFret = frets.filter(x => x).length > 0 ? Math.min(...frets.filter(x => x)) : 1\n      let maxFret = frets.filter(x => x).length > 0 ? Math.max(...frets.filter(x => x)) : 1\n\n      // get number of frets to display on diagram (with minimum of 4)\n      let nbFrets = Math.max(4, maxFret + 1 - minFret)\n\n      // get first fret displayed in the diagram: start at 1 if possible otherwise start at minFret\n      let startingFret = maxFret + 1 - nbFrets <= 1 ? 1 : minFret\n\n      // get relative barred fret (\"-\" kept as is)\n      let fingering = chord.fingering.split('/')\n      if (fingering[1] && fingering[1] !== '-') fingering[1] = Utils.abs2rel(fingering[1], startingFret)\n\n      // build a relative tablature (\"0\" and \"x\" kept as is)\n      let relTablature = ''\n      for (let char of chord.tablature) relTablature += char === 'x' || char === '0' ? char : Utils.abs2rel(char, startingFret)\n\n      // use nice ♯ and ♭ in diagram (replace only last occurence)\n      let name = chord.name ? chord.name.replace(/#([^#]*)$/, '♯$1').replace(/b([^b]*)$/, '♭$1') : chord.tablature\n\n      // build final url\n      return 'http://chordpix.com/i/' + (chordWidth || 450) + '/6/' + nbFrets + '/' + startingFret + '/' + relTablature + '/' + fingering.join('/') + '/' + name + '.png'\n    } catch (e) {\n      throw new ChordPixException('[Chord ' + JSON.stringify(chord) + '] ' + e.message)\n    }\n  }\n}\n","import { Utils } from './utils'\n\nlet DEBUG = 0\n\nexport class VexTabException {\n  constructor (message) {\n    this.message = message\n  }\n\n  toString () {\n    return 'VexTab error: ' + this.message\n  }\n}\n\nexport class VexTab {\n  // build VexTab chord notation\n  static Chord2VexTab (chord, strings, transpose) {\n    var vextabchord = []\n    for (let o of Utils.chordStrings(chord, strings)) {\n      vextabchord.push((o.mute ? 'X' : transpose + o.fret) + '/' + o.string)\n    }\n    return '(' + vextabchord.join('.') + ')'\n  }\n\n  static Note2VexTab (note, strokes, accents) {\n    let vextab = ''\n\n    // rest with given duration\n    if (note.rest) vextab += Utils.durationcode(note.duration) + '#5#'\n\n    else {\n      // note duration, slashed if no chord given\n      vextab += note.chord ? Utils.durationcode(note.duration) : Utils.durationcode(note.duration).replace(/(:(?:w|h|q|8|16|32))(d?)/g, '$1S$2')\n\n      // if tied note\n      if (note.tied) vextab += 'T'\n\n      // chord or dummy note (for slash notation)\n      vextab += !note.chord ? '(4/3)' : VexTab.Chord2VexTab(note.chord, note.strings, 0) // do not transpose with capo: chords are tabbed exactly as their diagrm says (author chooses to use capo'd chords or not)\n\n      // stroke flag d or u (dd and uu are not built-in in vextab and are handled later through text2VexTab)\n      if (strokes && note.flags.stroke && note.flags.stroke.length === 1) vextab += note.flags.stroke\n\n      // accent (put on top)\n      if (accents && note.flags.accent) vextab += '$.a>/' + accents + '.$'\n    }\n\n    return vextab\n  }\n\n  static Notes2Stave (songcheat, offset, notes, strokes, accents, subtitle, hs, notation, tablature) {\n    let vextab = ''\n    let barDuration = songcheat.barDuration\n\n    console.log('Drawing ' + (notation ? 'notation ' : '') + (tablature ? 'tablature ' : '') + 'stave with ' + notes.length + ' notes')\n\n    // start new stave with signature\n    vextab += '\\ntabstave notation=' + (notation ? 'true' : 'false') + ' tablature=' + (tablature ? 'true' : 'false') + '\\n'\n    vextab += 'tuning=' + songcheat.tuning + ' key=' + songcheat.signature.key + ' time=' + songcheat.signature.time.symbol + '\\n'\n\n    // add subtitle if first bar\n    if (subtitle && offset === 0) vextab += 'text .' + hs + ',.font=Arial-10-bold,[' + subtitle + ']\\n'\n\n    vextab += 'notes '\n\n    // initial bar line if needed (double if first bar)\n    if (offset % barDuration === 0) vextab += (offset === 0 ? '=||' : '|')\n\n    // add each note, followed by a bar or phrase sign if needed\n    for (let note of notes) {\n      vextab += VexTab.Note2VexTab(note, strokes, accents)\n      offset += note.duration\n      if (note.lastInPhrase && offset % barDuration !== 0) console.warn('Phrase matches no bar (' + Utils.durationcodes(barDuration - offset % barDuration) + ' away)')\n      if (offset % barDuration === 0) vextab += note.lastInPhrase ? '=||' : '|'\n    }\n\n    return vextab + '\\n'\n  }\n\n  static Text2VexTab (textGroups, barDuration, offset, staveDuration, h, font) {\n    let text = ''\n\n    // for groups that start within our range\n    for (let group of textGroups) {\n      if (group.offset >= offset + staveDuration) break\n      if (group.offset >= offset) {\n        let line = 'text ++,.' + h + ',.font=' + font\n\n        // initial bar line if needed\n        if (offset % barDuration === 0) line += ',|'\n\n        // add empty text groups to fill the gap between start of stave and start of group\n        let gap = group.offset - offset\n        while (gap > 0) {\n          // gap duration may never be more than what's left until end of bar\n          let d = Math.min(gap, barDuration - (offset % barDuration))\n          for (let code of Utils.durationcodes(d)) line += ',' + code + ', '\n          if ((offset + d) % barDuration === 0) line += ',|'\n\n          // continue with remaining gap\n          gap -= d\n        }\n\n        // add actual text group on all available duration until end of stave (or more precisely the largest duration code which is <= available duration)\n        let available = offset + staveDuration - group.offset\n        for (let code of Utils.durationcodes(available)) { line += ',' + code + ',' + (group.text.replace(/\\n/g, '') || ' '); break }\n\n        // remove trailing spaces and comma: vextab does not allow to finish on an empty word group\n        text += line.replace(/[ ,]+$/, '') + '\\n'\n      }\n    }\n\n    return text\n  }\n\n  static Songcheat2VexTab (songcheat) {\n    let vextab = ''\n    let unitIndex = 0\n    for (let unit of songcheat.structure) {\n      if (typeof songcheat.showUnitIndex === 'undefined' || songcheat.showUnitIndex === null || songcheat.showUnitIndex === unitIndex) {\n        vextab += VexTab.Unit2VexTab(songcheat, unit, unitIndex) + '\\n'\n      }\n      unitIndex++\n    }\n    return vextab\n  }\n\n  static Unit2VexTab (songcheat, unit, unitIndex) {\n    let stems = songcheat.mode.indexOf('s') >= 0\n    let showLyrics = songcheat.lyricsMode === 's'\n    let barDuration = songcheat.barDuration\n\n    let vextab = 'options tempo=' + songcheat.signature.tempo + ' player=false tab-stems=' + (stems ? 'true' : 'false') + ' tab-stem-direction=up\\n'\n    unitIndex = unitIndex || 0\n\n    let staveDuration = 0\n    let notes = []\n    let notesSlashed = []\n\n    console.log('VexTabbing unit ' + (unitIndex + 1) + ' \"' + unit.name + '\"')\n\n    // space before first unit and between units\n    vextab += 'options space=' + (unitIndex > 0 && songcheat.showUnitIndex === null ? 50 : 20) + '\\n'\n\n    // get lyrics word groups\n    let lyricsGroups = []\n    if (unit.groups) for (let group of unit.groups) lyricsGroups.push({ offset: group.offset, text: group.text + (DEBUG ? '/' + group.duration : '') })\n\n    // get rhythm wise chord changes (same as ascii lyrics)\n    let offset = 0\n    let chordGroups = []\n    for (let phrase of unit.part.phrases) {\n      for (let bar of phrase.bars) {\n        for (let chordChange of bar.chordChanges['rhythm']) {\n          chordGroups.push({ offset: offset, text: chordChange.chord.name + (DEBUG ? '/' + chordChange.duration : '') })\n          offset += chordChange.duration\n        }\n      }\n    }\n\n    // get PIMA and dd/uu word groups\n    offset = 0\n    let fingeringGroups = []\n    for (let phrase of unit.part.phrases) {\n      for (let bar of phrase.bars) {\n        for (let note of bar.rhythm.compiledScore) {\n          if (note.flags.fingering) fingeringGroups.push({ offset: offset, text: note.flags.fingering.toLowerCase() })\n          else if (note.flags.stroke && note.flags.stroke.length === 2) fingeringGroups.push({ offset: offset, text: note.flags.stroke === 'dd' ? '⤋' : '⤊' })\n          offset += note.duration\n        }\n      }\n    }\n\n    // get PM word groups\n    offset = 0\n    let pmGroups = []\n    for (let phrase of unit.part.phrases) {\n      for (let bar of phrase.bars) {\n        for (let note of bar.rhythm.compiledScore) {\n          if (note.flags.pm) pmGroups.push({ offset: offset, text: 'PM' })\n          offset += note.duration\n        }\n      }\n    }\n\n    // for each phrase in unit\n    offset = 0\n    let phraseIndex = 0\n    for (let phrase of unit.part.phrases) {\n      console.log('\\tphrase ' + (phraseIndex + 1))\n      let lastPhraseInPart = phraseIndex === unit.part.phrases.length - 1\n\n      // for each bar in phrase\n      let barIndex = 0\n      for (let bar of phrase.bars) {\n        console.log('\\t\\tbar ' + (barIndex + 1))\n        let lastBarInPhrase = barIndex === phrase.bars.length - 1\n\n        // for each note in rhythm\n        let noteIndex = 0\n        for (let note of bar.rhythm.compiledScore) {\n          // note with no chord set (slash)\n          let phraseNote = JSON.parse(JSON.stringify(note))\n          phraseNote.lastInPhrase = lastBarInPhrase && noteIndex === bar.rhythm.compiledScore.length - 1\n          notesSlashed.push(phraseNote)\n\n          // register note with corresponding chord\n          let chordedPhraseNote = JSON.parse(JSON.stringify(phraseNote))\n          chordedPhraseNote.chord = bar.chords[note.placeholderIndex]\n          if (!chordedPhraseNote.chord) throw new VexTabException('No chord found for placeholder ' + (note.placeholderIndex + 1))\n          notes.push(chordedPhraseNote)\n\n          // draw staves when we have completed barsPerLine bars or if the part is done\n          staveDuration += note.duration\n          let partDone = lastPhraseInPart && phraseNote.lastInPhrase\n          if (staveDuration >= songcheat.barsPerLine * barDuration || partDone) {\n            console.log((partDone ? 'EOP' : 'EOL') + ' @ ' + staveDuration + ' units: drawing ' + notes.length + ' notes stave' + (songcheat.mode.length > 1 ? 's' : ''))\n\n            // notation: shows unit.name, chords, accents, stems (slashes) and lyrics\n            // if tablature is not displayed, it also shows strokes/fingering\n            // it never shows PM and frets\n            if (songcheat.mode.indexOf('r') >= 0) {\n              let strokes = songcheat.mode.indexOf('t') < 0\n              vextab += VexTab.Notes2Stave(songcheat, offset, notesSlashed, strokes, 'top', unit.name, -1, true, false)\n              if (strokes && fingeringGroups.length > 0) vextab += VexTab.Text2VexTab(fingeringGroups, barDuration, offset, staveDuration, 11, 'Arial-9-normal') // PIMA on same line as strokes\n              if (showLyrics && lyricsGroups.length > 0) vextab += VexTab.Text2VexTab(lyricsGroups, barDuration, offset, staveDuration, strokes ? 13 : 11, 'Times-11-italic')\n              if (chordGroups.length > 0) vextab += VexTab.Text2VexTab(chordGroups, barDuration, offset, staveDuration, 2, 'Arial-10-normal')\n              vextab += 'options space=' + (strokes ? 40 : 20) + '\\n'\n            }\n\n            // tablature: shows PM, frets and strokes/fingering\n            // if notation is not displayed, it also shows unit.name, chords, lyrics and stems (if mode \"ts\")\n            // it never shows accents\n            if (songcheat.mode.indexOf('t') >= 0) {\n              if (stems) vextab += 'options space=' + 30 + '\\n'\n              vextab += VexTab.Notes2Stave(songcheat, offset, notes, true, false, songcheat.mode.indexOf('r') < 0 ? unit.name : false, stems ? -3 : -1, false, true)\n              if (fingeringGroups.length > 0) vextab += VexTab.Text2VexTab(fingeringGroups, barDuration, offset, staveDuration, 10, 'Arial-9-normal') // PIMA on same line as strokes\n              if (pmGroups.length > 0) vextab += VexTab.Text2VexTab(pmGroups, barDuration, offset, staveDuration, 10, 'Arial-9-normal') // PM on same line as strokes\n              if (songcheat.mode.indexOf('r') < 0 && showLyrics && lyricsGroups.length > 0) vextab += VexTab.Text2VexTab(lyricsGroups, barDuration, offset, staveDuration, 12, 'Times-11-italic')\n              if (songcheat.mode.indexOf('r') < 0 && chordGroups.length > 0) vextab += VexTab.Text2VexTab(chordGroups, barDuration, offset, staveDuration, stems ? -1 : 1, 'Arial-10-normal')\n              vextab += 'options space=' + (songcheat.mode.indexOf('r') ? 30 : 10) + '\\n'\n            }\n\n            // space after staves\n            vextab += 'options space=' + 10 + '\\n'\n\n            // increment offset\n            offset += staveDuration\n\n            // clear workspace\n            notes = []\n            notesSlashed = []\n            staveDuration = 0\n          }\n\n          // next note in rhythm\n          noteIndex++\n        }\n\n        // next bar in phrase\n        barIndex++\n      }\n\n      // next phrase in part\n      phraseIndex++\n    }\n\n    return vextab\n  }\n}\n","module.exports = {\n  \"Bass\": require(\"./Bass.json\"),\n  \"BassAmp360\": require(\"./BassAmp360.json\"),\n  \"BassFuzz\": require(\"./BassFuzz.json\"),\n  \"BassFuzz2\": require(\"./BassFuzz2.json\"),\n  \"BassSubDub\": require(\"./BassSubDub.json\"),\n  \"BassSubDub2\": require(\"./BassSubDub2.json\"),\n  \"Brass\": require(\"./Brass.json\"),\n  \"BritBlues\": require(\"./BritBlues.json\"),\n  \"BritBluesDriven\": require(\"./BritBluesDriven.json\"),\n  \"Buzzy1\": require(\"./Buzzy1.json\"),\n  \"Buzzy2\": require(\"./Buzzy2.json\"),\n  \"Celeste\": require(\"./Celeste.json\"),\n  \"ChorusStrings\": require(\"./ChorusStrings.json\"),\n  \"Dissonant1\": require(\"./Dissonant1.json\"),\n  \"Dissonant2\": require(\"./Dissonant2.json\"),\n  \"DissonantPiano\": require(\"./DissonantPiano.json\"),\n  \"DroppedSaw\": require(\"./DroppedSaw.json\"),\n  \"DroppedSquare\": require(\"./DroppedSquare.json\"),\n  \"DynaEPBright\": require(\"./DynaEPBright.json\"),\n  \"DynaEPMed\": require(\"./DynaEPMed.json\"),\n  \"Ethnic33\": require(\"./Ethnic33.json\"),\n  \"Full1\": require(\"./Full1.json\"),\n  \"Full2\": require(\"./Full2.json\"),\n  \"GuitarFuzz\": require(\"./GuitarFuzz.json\"),\n  \"Harsh\": require(\"./Harsh.json\"),\n  \"MklHard\": require(\"./MklHard.json\"),\n  \"Noise\": require(\"./Noise.json\"),\n  \"Organ2\": require(\"./Organ2.json\"),\n  \"Organ3\": require(\"./Organ3.json\"),\n  \"PhonemeAh\": require(\"./PhonemeAh.json\"),\n  \"PhonemeBah\": require(\"./PhonemeBah.json\"),\n  \"PhonemeEe\": require(\"./PhonemeEe.json\"),\n  \"PhonemeO\": require(\"./PhonemeO.json\"),\n  \"PhonemeOoh\": require(\"./PhonemeOoh.json\"),\n  \"PhonemePopAhhhs\": require(\"./PhonemePopAhhhs.json\"),\n  \"Piano\": require(\"./Piano.json\"),\n  \"Pulse\": require(\"./Pulse.json\"),\n  \"PutneyWavering\": require(\"./PutneyWavering.json\"),\n  \"Saw\": require(\"./Saw.json\"),\n  \"Square\": require(\"./Square.json\"),\n  \"TB303Square\": require(\"./TB303Square.json\"),\n  \"Throaty\": require(\"./Throaty.json\"),\n  \"Triangle\": require(\"./Triangle.json\"),\n  \"Trombone\": require(\"./Trombone.json\"),\n  \"TwelveOpTines\": require(\"./TwelveOpTines.json\"),\n  \"TwelveStringGuitar1\": require(\"./TwelveStringGuitar1.json\"),\n  \"WarmSaw\": require(\"./WarmSaw.json\"),\n  \"WarmSquare\": require(\"./WarmSquare.json\"),\n  \"WarmTriangle\": require(\"./WarmTriangle.json\"),\n  \"Wurlitzer\": require(\"./Wurlitzer.json\"),\n  \"Wurlitzer2\": require(\"./Wurlitzer2.json\")\n}\n","import { Utils } from './utils'\nimport waveTables from '@mohayonao/wave-tables'\n\nexport class Player {\n  constructor (audioCtx, notes, config) {\n    this.MODE_RHYTHM = 1 // play beeps only\n    this.MODE_BASS = 2 // when there is a strummed chord, play only bass (no effect onindividual strings)\n    this.MODE_CHORDS = 3 // play actual strummed chords\n\n    config = config || {}\n    config.signature = config.signature || {}\n    config.signature.time = config.signature.time || {}\n\n    // audio context\n    this.audioCtx = audioCtx\n\n    // notes to beep\n    this.notes = notes\n\n    // config: loop or not and callback at end if no loop\n    this.loop = config.loop || false\n    this.onDone = config.onDone || null\n    this.onCountdown = config.onCountdown || function () {}\n\n    // config: capo and signature (tempo, time, shuffle)\n    this.capo = config.capo || 0\n    this.tempo = config.signature.tempo || 100\n    this.beatsPerBar = config.signature.time.beatsPerBar || 4\n    this.beatDuration = config.signature.time.beatDuration || ':q'\n    this.shuffle = config.signature.shuffle ? Utils.duration(config.signature.shuffle) : false\n\n    // tuning, defaults to standard tuning\n    this.tuning = config.tuning || [329.63, // E4\n      246.94, // B3\n      196.00, // G3\n      146.83, // D3\n      110.00, // A2\n      82.41\n    ] // E2\n\n    // play control\n    this.stopped = true\n    this.paused = false\n\n    // initialize to defaults\n    this.speed(100)\n    this.setDisto(0)\n    this.setVolume(50)\n    this.setMode(this.MODE_CHORDS)\n    this.setType(config.type || 'Piano')\n  }\n\n  makeDistortionCurve (amount) {\n    let k = typeof amount === 'number' ? amount : 50\n    let nSamples = 44100\n    let curve = new Float32Array(nSamples)\n    let deg = Math.PI / 180\n    for (let i = 0; i < nSamples; ++i) {\n      let x = i * 2 / nSamples - 1\n      curve[i] = (3 + k) * x * 20 * deg / (Math.PI + k * Math.abs(x))\n    }\n    return curve\n  }\n\n  /**\n   * duration of the tone in milliseconds\n   * frequency of the tone in hertz\n   * volume of the tone between 0 and 1\n   * type of tone. Possible values are sine, square, sawtooth, triangle, and custom.\n   * callback to use on end of tone\n   */\n  sound (time, duration, frequency, volume, distortion, type, onended) {\n    let audioCtx = this.audioCtx\n    let gainNode = audioCtx.createGain()\n    gainNode.gain.value = volume\n\n    if (distortion) {\n      let distoNode = audioCtx.createWaveShaper()\n      distoNode.curve = this.makeDistortionCurve(parseInt(distortion, 10))\n      distoNode.oversample = '4x'\n      distoNode.connect(audioCtx.destination)\n      gainNode.connect(distoNode)\n    } else gainNode.connect(audioCtx.destination)\n\n    let oscillator = audioCtx.createOscillator()\n    oscillator.connect(gainNode)\n\n    oscillator.frequency.value = frequency\n    oscillator.onended = onended\n\n    // type can be a periodic wave or a standard oscillator type\n    if (waveTables[type]) oscillator.setPeriodicWave(audioCtx.createPeriodicWave(waveTables[type].real, waveTables[type].imag))\n    else oscillator.type = type\n\n    oscillator.start(time)\n    oscillator.stop(time + duration)\n  }\n\n  chord2frequencies (chord, strings, transpose) {\n    let freqs = []\n    for (let o of Utils.chordStrings(chord, strings)) {\n      if (!o.mute) freqs.push(this.tuning[o.string - 1] * Math.pow(Math.pow(2, 1 / 12), transpose + o.fret))\n    }\n    return freqs\n  }\n\n  ms_ (note) {\n    // base duration of note\n    let ms_ = note.duration * this.msPerUnit\n\n    // change duration proportions for shuffled notes\n    if (this.shuffle && note.duration === this.shuffle) {\n      if (note.offset % (2 * this.shuffle) === 0) ms_ *= 1.3333\n      else ms_ *= 0.6667\n    }\n\n    return ms_\n  }\n\n  note_ (time) {\n    let audioCtx = this.audioCtx\n    var self = this\n\n    // stop or pause requested\n    if (this.stopped || this.paused) {\n      this.donePlaying = true\n      return true\n    }\n\n    // get note to play\n    if (!this.notes) return false\n    let note = this.notes[this.noteIndex]\n    if (!note) return false\n\n    let isBar = note.offset === 0\n    let isBeat = note.offset % Utils.duration(this.beatDuration) === 0\n    let isUp = note.flags.stroke === 'u' || note.flags.stroke === 'uu'\n    let isDown = note.flags.stroke === 'd' || note.flags.stroke === 'dd'\n    let isArpeggiated = note.flags.stroke && note.flags.stroke.length === 2\n\n    // get number of ms that this note should last\n    let ms = note.tied ? 0 : this.ms_(note)\n\n    // consume next ties note(s) if any\n    for (let nextNoteIndex = this.noteIndex + 1; nextNoteIndex < this.notes.length && this.notes[nextNoteIndex].tied; nextNoteIndex++) ms += this.ms_(this.notes[nextNoteIndex])\n\n    // beep or chord volume\n    let volume = 0.25 * (this.volume / 100.0) // base gain from 0 to 1.5 according to user volume slider\n    if (note.flags.accent) volume *= 1.5 // increase gain by 50% if accent\n    if (note.rest) volume = 0 // silence if rest\n\n    // beep frequency\n    let freqs = [440 * 1.5]\n    if (isBar) freqs[0] *= 2 // octave\n    else if (isBeat) freqs[0] *= 1.5 // quinte\n\n    // get note chord, ignored in rhythm mode\n    let chord = this.mode === this.MODE_RHYTHM ? null : note.chord\n\n    // beep duration is 5 ms\n    // actual notes are played for the whole duration if tied otherwise for 90%\n    let beepduration = chord ? (note.tied ? ms : ms * 0.90) : Math.min(ms, 5)\n\n    // for rhythm type is always square and no distortion, for actual notes use the user-defined settings\n    let type = chord ? this.type : 'square'\n    let distortion = chord ? this.distortion : null\n\n    // played chord (for a rest, chord is set but strings is not)\n    if (chord && note.strings) {\n      // get frequencies for chord notes\n      freqs = this.chord2frequencies(chord, this.mode === this.MODE_BASS ? note.strings.replace(/\\*/g, 'B') : note.strings, this.capo)\n\n      // reverse string order if up stroke\n      if (isUp) freqs = freqs.reverse()\n\n      // adjust volume according to number of simultaneous notes\n      // volume = volume / (2.0 * Math.sqrt(freqs.length));\n      // UPDATE: no, bass among chords is otherwise louder than it should\n      // UPDATE: instead increase volume only if BASS ONLY mode\n      if (this.mode === this.MODE_BASS) volume *= 3\n    }\n\n    // set next note to play\n    this.noteIndex = (this.noteIndex + 1) % this.notes.length\n\n    // info message, scheduled to display at the same time as oscillator will play our sound\n    let what = note.rest ? 'REST' : (note.tied ? 'TIED' : (chord ? chord.name + '/' + freqs.length + ' ' + (isDown ? 'B' : '') + (isUp ? 'H' : '') : 'BEEP'))\n    let message = (isBar ? '\\n|\\t' : '\\t') + ('[' + what + ']').padEnd(10, ' ') + (note.offset + Utils.durationcode(note.duration)).padEnd(5, ' ') + ' ' + ms.toFixed(0) + ' ms [VOL ' + (volume * 100) + '] ' + (isBar ? ' [BAR]' : (isBeat ? ' [BEAT]' : '')) + (note.flags.accent ? ' [ACCENT]' : '')\n    setTimeout(function () { console.info(message) }, Math.max(0, time - audioCtx.currentTime) * 1000)\n\n    // jump to next note if tied\n    if (note.tied) {\n      self.note_(time)\n      return\n    }\n\n    // play beep (1 note) or chord (N notes)\n    let fIndex = 0\n    let delay = 0\n    for (let frequency of freqs) {\n      // handle next node when last note has done playing\n      this.sound(time + delay / 1000.0, (beepduration - delay) / 1000.0, frequency, volume, distortion, type, fIndex < freqs.length - 1 ? null : function () {\n        // back on first note: stop and callback if not loop\n        if (self.noteIndex === 0 && !self.loop) {\n          self.stop()\n          if (self.onDone) self.onDone()\n        } else self.note_(time + ms / 1000.0)\n      })\n\n      // simulate the fact that strings hit first will sound first (but they'll all stop at the same time, hence substrating delay from beepduration above)\n      // when a chord is arpeggiated, take 3/4 of available duration to hit strings the one after the other\n      delay += (isArpeggiated ? (beepduration * 0.75) / freqs.length : (note.tied ? 0 : 10))\n\n      // simulate the fact that first hit strings will sound louder\n      volume *= 0.95\n\n      fIndex++\n    }\n  }\n\n  stop () {\n    this.stopped = true\n    this.paused = false\n    if (this.cd) {\n      clearTimeout(this.cd)\n      this.onCountdown()\n    }\n  }\n\n  pause () {\n    this.stopped = false\n    this.paused = true\n    if (this.cd) {\n      clearTimeout(this.cd)\n      this.onCountdown()\n    }\n  }\n\n  play (countdown) {\n    let audioCtx = this.audioCtx\n    let self = this\n\n    if (!this.paused) this.noteIndex = 0\n    this.stopped = false\n    this.paused = false\n\n    this.onCountdown(countdown)\n    if (countdown) this.cd = setTimeout(function () { self.play(countdown - 1) }, 1000)\n    else {\n      // compute for each note the offset wrt the bar it's contained in\n      let offset = 0\n      for (let note of this.notes) {\n        note.offset = offset\n        offset = (offset + note.duration) % (this.beatsPerBar * Utils.duration(this.beatDuration))\n      }\n\n      this.note_(audioCtx.currentTime)\n    }\n  }\n\n  rewind () {\n    if (this.stopped) return\n\n    if (this.paused) {\n      this.noteIndex = 0\n      return\n    }\n\n    let self = this\n    this.donePlaying = false\n    this.stop()\n    let recfun = function () {\n      if (self.donePlaying) self.play()\n      else setTimeout(recfun, 100)\n    }\n    recfun()\n  }\n\n  getTempo () {\n    return (this.tempo * this.speedpct / 100.0).toFixed(0)\n  }\n\n  speed (pct) {\n    if (pct < 0) throw new Error('Invalid tempo percentage: ' + pct)\n\n    this.speedpct = pct\n\n    // compute ms per duration unit based on given tempo and beat duration\n    let msPerBeat = 60000 / (this.tempo * this.speedpct / 100.0) // ms/beat = ms/minute : beats/minute\n    this.msPerUnit = msPerBeat / Utils.duration(this.beatDuration) // ms/unit = ms/beat : units/beat\n    console.info('Player gone to ' + msPerBeat + ' ms / beat')\n  }\n\n  speedup (step) {\n    this.speed(Math.min(500, this.speedpct + step))\n  }\n\n  slowdown (step) {\n    this.speed(Math.max(20, this.speedpct - step))\n  }\n\n  setMode (mode) {\n    this.mode = parseInt(mode, 10)\n    console.info('Player gone to mode ' + mode)\n  }\n\n  setType (type) {\n    this.type = type\n    console.info('Player gone to type ' + type)\n  }\n\n  setDisto (d) {\n    this.distortion = parseInt(d, 10)\n    console.info('Player gone to disto ' + d)\n  }\n\n  setVolume (v) {\n    this.volume = parseInt(v, 10)\n    console.info('Player gone to volume ' + v)\n  }\n}\n"],"names":["Utils","a","b","length","i","str","spaces","s","charAt","toUpperCase","slice","firstUpper","camel","toLowerCase","replace","match","group1","char","isNaN","isFinite","Error","text1","text2","sepLine","keepEmptyLines","a1","split","a2","map","v","lines","trim","push","join","data","ret","d","encodeURIComponent","code","units","duration","codes","current","rest","durationcode","e","fret","String","fromCharCode","charCodeAt","parseInt","startingFret","char2fret","relFret","fret2char","chord","strings","tablature","name","fingering","result","string","indexOf","xIndex","mute","ParserException","line","message","Parser_","songcheat","blocks","text","tokens","tokenize","tokenIndex","token","keyword","isKeyword","value","params","handler","handleDefault","call","lastResult","chordIndex","rhythmIndex","partIndex","unitIndex","chords","rhythms","parts","paramIndex","param","Math","floor","camelCase","reSpaces","reNewline","lineNumber","parseFloat","handleSignature","comment","part","splice","bars","pIndex","phrases","JSON","parse","stringify","bar","substr","found","rhythm","id","handleChord","args","prototype","apply","Parser","parser_","log","getPrecedingKeyword","CompilerException","Compiler_","DEBUG","console","arguments","mode","lyricsMode","barsPerLine","signature","key","time","beatDuration","beatsPerBar","symbol","lyricsUnit","barDuration","resolveIds","structure","unitsByPart","numberByPart","unit","colors","color","compileRhythm","phraseIndex","phrase","chordChanges","lastChord","addChordChanges","c","barIndex","chordChangesMode","resolveId","Array","chordId","collection","initialNoteDuration","score","noteDuration","placeholdercount","position","lastToken","compiledScore","tied","flags","placeholderIndex","flagsString","stroke","accent","pm","flag","o","resetAtBars","offset","note","hidden","Compiler","compiler_","title","compile","MIN_LYRICS_BARLEN","LYRICS_SUM_DURATIONS","KEEP_EMPTY_LINES","LyricsException","Lyrics_","defaultCursorStep","warnings","lyrics","groups","registerGroup","missingDuration","durationcodes","group","groupLength","getGroupLength","plen","max","ceil","p","pmax","chordDuration","g","getChordDisplay","debugText","zeroDuration","toFixed","maxConsecutiveSpaces","showDots","unitText","groupIndex","needFinalSpace","maxLength","min","minLength","filler","groupText","chordInserts","lengthStillToPlaceOnThisGroup","lengthYetPlacedOnThisGroup","chordChange","positionDelta","positionDelta_","chordInsert","skip","unitText_","chordText","inserted","interlace","step","addDuration","Lyrics","lyrics_","parseLyrics","getUnitText","ChordPixException","ChordPix","url","barredFret","rel2abs","chordWidth","frets","minFret","filter","x","maxFret","nbFrets","abs2rel","relTablature","VexTabException","VexTab","transpose","vextabchord","chordStrings","strokes","accents","vextab","Chord2VexTab","notes","subtitle","hs","notation","tuning","Note2VexTab","lastInPhrase","warn","textGroups","staveDuration","h","font","gap","available","showUnitIndex","Unit2VexTab","stems","showLyrics","tempo","notesSlashed","lyricsGroups","chordGroups","fingeringGroups","pmGroups","lastPhraseInPart","lastBarInPhrase","noteIndex","phraseNote","chordedPhraseNote","partDone","Notes2Stave","Text2VexTab","Player","audioCtx","config","MODE_RHYTHM","MODE_BASS","MODE_CHORDS","loop","onDone","onCountdown","capo","shuffle","stopped","paused","speed","setDisto","setVolume","setMode","setType","type","amount","k","nSamples","curve","Float32Array","deg","PI","abs","frequency","volume","distortion","onended","gainNode","createGain","gain","distoNode","createWaveShaper","makeDistortionCurve","oversample","connect","destination","oscillator","createOscillator","waveTables","setPeriodicWave","createPeriodicWave","real","imag","start","stop","freqs","pow","ms_","msPerUnit","self","donePlaying","isBar","isBeat","isUp","isDown","isArpeggiated","ms","nextNoteIndex","beepduration","chord2frequencies","reverse","what","padEnd","info","currentTime","note_","fIndex","delay","sound","cd","countdown","setTimeout","play","recfun","speedpct","pct","msPerBeat"],"mappings":"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"}