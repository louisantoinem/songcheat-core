{"version":3,"file":"songcheat-core.cjs.js","sources":["../src/utils.js","../src/parser.js","../src/compiler.js"],"sourcesContent":["export class Utils {\n  /**\n  * Array helper functions\n  */\n\n  static arraysEqual (a, b) {\n    if (a === b) return true\n    if (a === null || b === null) return false\n    if (a.length !== b.length) return false\n    for (var i = 0; i < a.length; ++i) {\n      if (a[i] !== b[i]) return false\n    }\n    return true\n  }\n\n  /**\n  * String helper functions\n  */\n\n  static title (str) {\n    return '\\n' + this.spaces(str.length + 8, '*') + '\\n*** ' + str + ' ***\\n' + this.spaces(str.length + 8, '*') + '\\n'\n  }\n\n  static firstUpper (s) {\n    return s.charAt(0).toUpperCase() + s.slice(1)\n  }\n\n  static camelCase (s, firstUpper) {\n    var camel = s.toLowerCase().replace(/(?:[-_])(.)/g, function (match, group1) { return group1.toUpperCase() })\n    return firstUpper ? camel.charAt(0).toUpperCase() + camel.slice(1) : camel\n  }\n\n  static spaces (length, char) {\n    if (isNaN(length) || !isFinite(length) || length < 0) throw new Error('Length must a positive finite number')\n    var s = ''\n    for (var i = 0; i < length; i++) s += char || ' '\n    return s\n  }\n\n  /**\n   * Interlace two multi line strings: one line of each file in alternance\n   * If the second file contains more line then the first one, these additional lines will be ignored\n   **/\n\n  static interlace (text1, text2, sepLine, keepEmptyLines) {\n    var a1 = text1.split(/\\r?\\n/)\n    var a2 = text2.split(/\\r?\\n/)\n    var a = a1.map(function (v, i) {\n      let lines = keepEmptyLines || (a2[i] && a2[i].trim()) ? [v, a2[i]] : [v]\n      if (typeof sepLine === 'string') lines.push(sepLine)\n      return lines.join('\\n')\n    })\n    return a.join('\\n')\n  }\n\n  /**\n   * Encode given parameters as a GET query string\n   **/\n\n  static encodeQueryData (data) {\n    let ret = []\n    for (let d in data) { ret.push(encodeURIComponent(d) + '=' + encodeURIComponent(data[d])) }\n    return ret.join('&')\n  }\n\n  /**\n   * Convert a duration code to the smallest unit (64th)\n   **/\n\n  static duration (code) {\n    if (code === ':32') return 2\n    if (code === ':16') return 4\n    if (code === ':8') return 8\n    if (code === ':q') return 16\n    if (code === ':h') return 32\n    if (code === ':w') return 64\n\n    if (code === ':32d') return 3\n    if (code === ':16d') return 6\n    if (code === ':8d') return 12\n    if (code === ':qd') return 24\n    if (code === ':hd') return 48\n    if (code === ':wd') return 96\n\n    throw new Error('Invalid duration code \"' + code + '\"')\n  }\n\n  /**\n   * Convert back a number of units (64th) into a duration code\n   **/\n\n  static durationcode (units) {\n    for (let code of ['w', 'h', 'q', '8', '16', '32']) {\n      if (this.duration(':' + code) === units) return ':' + code\n      if (this.duration(':' + code + 'd') === units) return ':' + code + 'd'\n    }\n\n    throw new Error('Could not find a code with a value of ' + units + ' units')\n  }\n\n  /**\n   * Convert a number of units (64th) into one or several duration codes\n   **/\n\n  static durationcodes (units) {\n    var codes = []\n\n    var current = units\n    var rest = 0\n\n    while (current > 0) {\n      try {\n        codes.push(this.durationcode(current))\n        current = rest\n        rest = 0\n      } catch (e) {\n        current--\n        rest++\n      }\n    }\n\n    if (rest > 0) throw new Error('Could not find codes adding to a value of ' + units + ' units')\n\n    return codes\n  }\n\n  /**\n   * Convert a fret number (up to 35) to a single char (digit or capital letter)\n   * Fret 10 is notated as A, 11 as B, ... and 35 as Z\n   */\n\n  static fret2char (fret) {\n    if (isNaN(fret) || fret < 0 || fret > 35) throw new Error('Cannot convert fret number ' + fret + ' to a single char (expected a value between 0 and 35)')\n    return fret < 10 ? '' + fret : String.fromCharCode('A'.charCodeAt(0) + fret - 10)\n  }\n\n  /**\n   * Convert a single char (digit or capital letter) to a fret number\n   * A means fret 10, 11 fret B, ... and Z fret 35\n   */\n\n  static char2fret (char) {\n    if (typeof char !== 'string') throw new Error('Invalid fret char ' + char + ' expected a string')\n    if (!char.match(/^[0-9A-Z]$/)) throw new Error('Invalid fret char ' + char + ' (expected a value between [0-9] or [A-Z])')\n    return char >= 'A' ? 10 + char.charCodeAt(0) - 'A'.charCodeAt(0) : parseInt(char, 10)\n  }\n\n  /**\n   * Convert an absolute fret number (single char) to a relative fret number (0 never changes)\n   */\n\n  static abs2rel (char, startingFret) {\n    let fret = this.char2fret(char)\n    if (isNaN(fret) || fret < 0) throw new Error('Invalid fret number ' + fret + ' (expected a positive or 0 integer value)')\n    if (fret === 0) return 0\n    if (isNaN(startingFret) || startingFret < 0) throw new Error('Invalid starting fret number ' + startingFret + ' (expected a positive or 0 integer value)')\n    if (startingFret + 8 < fret || startingFret > fret) throw new Error('Fret ' + fret + ' cannot be made relative to starting fret ' + startingFret + ' within the allowed range of 1 to 9')\n    return fret + 1 - startingFret\n  }\n\n  /**\n   * Convert a relative fret number to an absolute fret number (single char) (0 never changes)\n   */\n\n  static rel2abs (relFret, startingFret) {\n    return this.fret2char(relFret ? relFret + startingFret - 1 : relFret)\n  }\n\n  /**\n   * Take a chord and a placeholder contents\n   * Return an array containing one object { string, fret, mute } for each played string\n   */\n\n  static chordStrings (chord, strings) {\n    if (!chord.tablature) throw new Error('Tablature not defined for chord ' + chord.name)\n    if (!chord.fingering) throw new Error('Fingering not defined for chord ' + chord.name)\n\n    var result = []\n    for (var i = 0; i < chord.tablature.length; i++) {\n      // string will be between 6 and 1 since chord.tablature.length has been verified and is 6\n      var string = 6 - i\n\n      // string never played in this chord\n      if (chord.tablature[i] === 'x') continue\n\n      // first time we meet a played string, it's the bass so replace B and B' with the string number\n      strings = strings.replace(/B'/g, (string >= 5 ? string - 1 : string))\n      strings = strings.replace(/B/g, string)\n\n      // check if this string should be played with the right hand\n      // * means \"all strings\", otherwise concatenated specific string numbers are specified (or B for bass or B' for alternate bass)\n      // x after string means muted (ghost) note\n      if (strings.match(/^\\*/) || strings.indexOf(string) !== -1) {\n        let fret = this.char2fret(chord.tablature[i])\n        let xIndex = strings.match(/^\\*/) ? 1 : strings.indexOf(string) + 1\n        let mute = strings[xIndex] === 'x'\n        result.push({\n          string: string,\n          fret: fret,\n          mute: mute\n        })\n      }\n    }\n\n    return result\n  }\n}\n","import { Utils } from './utils'\n\nexport class ParserException {\n  constructor (line, message) {\n    this.message = message\n    this.line = line\n  }\n\n  toString () {\n    return 'Parser error at line ' + this.line + ': ' + this.message\n  }\n}\n\nclass Parser_ {\n  constructor () {\n    this.songcheat = {}\n    this.blocks = {}\n  }\n\n  parse (text) {\n    // reset\n    this.songcheat = {}\n    this.blocks = {}\n\n    // split text into tokens\n    let tokens = this.tokenize(text)\n    if (tokens.length === 0) return this.songcheat\n\n    let tokenIndex = 0\n    while (tokenIndex < tokens.length) {\n      let token = tokens[tokenIndex]\n      let keyword = this.isKeyword(token)\n\n      // we must be on a keyword, otherwise it means that first token in text is not a keyword as expected\n      if (!keyword) throw new ParserException(token.line, 'expected keyword, found \"' + token.value + '\"')\n\n      // get all tokens until next keyword or end\n      let params = []\n      for (++tokenIndex; tokenIndex < tokens.length; ++tokenIndex) {\n        if (this.isKeyword(tokens[tokenIndex])) break\n        params.push(tokens[tokenIndex])\n      }\n\n      // use specific handler if any or default one\n      let handler = this['handle' + Utils.firstUpper(keyword)] || this.handleDefault\n      if (typeof handler === 'function') handler.call(this, token.line, keyword, params)\n      else throw new ParserException(token.line, 'non function handler found for keyword ' + keyword)\n    }\n\n    return this.songcheat\n  }\n\n  getPrecedingKeyword (text, line) {\n    // reset\n    this.songcheat = {}\n    this.blocks = {}\n\n    let lastResult = null\n\n    // split text into tokens\n    let tokens = this.tokenize(text)\n    if (tokens.length === 0) return true\n\n    let tokenIndex = 0\n    while (tokenIndex < tokens.length) {\n      let token = tokens[tokenIndex]\n      let keyword = this.isKeyword(token)\n\n      if (token.line > line) return lastResult\n\n      // we must be on a keyword, otherwise it means that first token in text is not a keyword as expected\n      if (!keyword) throw new ParserException(token.line, 'expected keyword, found \"' + token.value + '\"')\n\n      // get all tokens until next keyword or end\n      let params = []\n      for (++tokenIndex; tokenIndex < tokens.length; ++tokenIndex) {\n        if (this.isKeyword(tokens[tokenIndex])) break\n        params.push(tokens[tokenIndex])\n      }\n\n      // use specific handler if any or default one\n      let handler = this['handle' + Utils.firstUpper(keyword)] || this.handleDefault\n      if (typeof handler === 'function') handler.call(this, token.line, keyword, params)\n      else throw new ParserException(token.line, 'non function handler found for keyword ' + keyword)\n\n      lastResult = { line: token.line, keyword: keyword, params: params, chordIndex: null, rhythmIndex: null, partIndex: null, unitIndex: null }\n\n      if (keyword === 'chord') lastResult.chordIndex = this.songcheat.chords.length - 1\n      else if (keyword === 'rhythm') lastResult.rhythmIndex = this.songcheat.rhythms.length - 1\n      else if (keyword === 'part') lastResult.partIndex = this.songcheat.parts.length - 1\n      else if (keyword === 'structure') {\n        // special case since there is no distinct UNIT keyword for each unit, but a single STRUCTURE keyword for all units\n        let paramIndex = 0\n        for (let param of params) {\n          if (param.line > line) break\n          lastResult.unitIndex = Math.floor(paramIndex / 2)\n          paramIndex++\n        }\n      }\n    }\n\n    return lastResult\n  }\n\n  isKeyword (token) {\n    let keyword = Utils.camelCase(token.value)\n    return ['artist', 'title', 'year', 'difficulty', 'video', 'tutorial', 'comment', 'tuning', 'capo', 'key', 'time', 'tempo', 'shuffle', 'chord', 'rhythm', 'block', 'part', 'lyricsUnit' /* will disappear soon */, 'structure'].indexOf(keyword) >= 0 ? keyword : false\n  }\n\n  tokenize (text) {\n    let tokens = []\n\n    // https://stackoverflow.com/questions/4780728/regex-split-string-preserving-quotes?noredirect=1&lq=1\n    let reSpaces = /(?<=^[^\"]*(?:\"[^\"]*\"[^\"]*)*)[\\s\\t]+(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/\n    let reNewline = /(?<=^[^\"]*(?:\"[^\"]*\"[^\"]*)*)(\\r?\\n)(?=(?:[^\"]*\"[^\"]*\")*[^\"]*$)/\n\n    let lineNumber = 1\n\n    // split at newlines unless enclosed in quotes\n    for (let line of text.split(reNewline)) {\n      // split also returns the newlines, ignore them\n      if (line.match(/^\\r?\\n$/)) continue\n\n      // trim line\n      line = line.trim()\n\n      // console.log(\"L\" + lineNumber + \": [\"+ line + \"]\");\n\n      // if not a comment or empty line\n      if (line && !line.match(/^#/)) {\n        // split at spaces and tabs unless enclosed in quotes, then trim spaces and quotes\n        for (let value of line.split(reSpaces).map(s => s.trim().replace(/^\"|\"$/g, ''))) tokens.push({ 'value': value, 'line': lineNumber })\n      }\n\n      // increment line number\n      lineNumber += (1 + (line.match(/(?:\\r?\\n)/g) || []).length)\n    }\n\n    return tokens\n  }\n\n  handleDefault (line, keyword, params) {\n    if (params.length !== 1) throw new ParserException(line, keyword.toUpperCase() + ' expected exactly 1 value, but found ' + params.length)\n    this.songcheat[keyword] = ['year', 'capo', 'difficulty'].indexOf(keyword) >= 0 ? parseInt(params[0].value, 10) : params[0].value\n  }\n\n  handleSignature (line, keyword, params) {\n    if (params.length !== 1) throw new ParserException(line, keyword.toUpperCase() + ' expected exactly 1 value, but found ' + params.length)\n    this.songcheat['signature'] = this.songcheat['signature'] || {}\n    this.songcheat['signature'][keyword] = keyword === 'tempo' ? parseFloat(params[0].value, 10) : params[0].value\n  }\n\n  handleKey (line, keyword, params) { return this.handleSignature(line, keyword, params) }\n  handleTempo (line, keyword, params) { return this.handleSignature(line, keyword, params) }\n  handleShuffle (line, keyword, params) { return this.handleSignature(line, keyword, params) }\n\n  handleTime (line, keyword, params) {\n    if (params.length !== 3) throw new ParserException(line, keyword.toUpperCase() + ' expected exactly 3 values, but found ' + params.length)\n    this.songcheat['signature'] = this.songcheat['signature'] || []\n    this.songcheat['signature']['time'] = { 'beatsPerBar': params[1].value, 'beatDuration': params[2].value, 'symbol': params[0].value }\n  }\n\n  handleChord (line, keyword, params) {\n    if (params.length < 2 || params.length > 4) throw new ParserException(line, keyword.toUpperCase() + ' expected between 2 and 4 values (name, tablature[, fingering=\"000000/-\", comment=\"\"]), but found ' + params.length)\n\n    let name = params[0].value\n    let tablature = params[1].value\n    let fingering = params.length >= 3 ? params[2].value : '000000/-'\n    let comment = params.length >= 4 ? params[3].value : ''\n\n    this.songcheat['chords'] = this.songcheat['chords'] || []\n    let chord = { 'id': this.songcheat['chords'].length + 1, 'name': name, 'tablature': tablature, 'fingering': fingering, 'comment': comment }\n    this.songcheat['chords'].push(chord)\n\n    // return created chord (used when meeting an inline chord)\n    return chord\n  }\n\n  handleRhythm (line, keyword, params) {\n    if (params.length !== 2) throw new ParserException(line, keyword.toUpperCase() + ' expected exactly 2 values (id and score), but found ' + params.length)\n    this.songcheat['rhythms'] = this.songcheat['rhythms'] || []\n    this.songcheat['rhythms'].push({ 'id': this.songcheat['rhythms'].length + 1, 'name': params[0].value, 'score': params[1].value })\n  }\n\n  handleBlock (line, keyword, params) {\n    if (params.length < 2) throw new ParserException(line, keyword.toUpperCase() + ' expected at least 2 values (name and bar(s)), but found ' + params.length)\n    this.blocks[params[0].value] = params.slice(1)\n  }\n\n  handlePart (line, keyword, params) {\n    if (params.length < 2) throw new ParserException(line, keyword.toUpperCase() + ' expected at least 2 values (name and bar(s)), but found ' + params.length)\n    this.songcheat['parts'] = this.songcheat['parts'] || []\n\n    // extract part name from params\n    let part = { 'id': this.songcheat['parts'].length + 1, 'name': params[0].value, 'phrases': [] }\n    params = params.splice(1)\n    this.songcheat['parts'].push(part)\n\n    // iterate on remaining params to get bars and phrases\n    let bars = []\n    for (let pIndex = 0; pIndex < params.length; pIndex++) {\n      let param = params[pIndex]\n\n      // phrase separator\n      if (param.value === '||') {\n        part.phrases.push({ 'bars': bars })\n        bars = []\n        continue\n      }\n\n      // bar repeater\n      if (param.value === '%') {\n        if (bars.length === 0) throw new ParserException(param.line, 'found bar repeater ' + param.value + ' but there is no bar yet in phrase')\n        bars.push(JSON.parse(JSON.stringify(bars[bars.length - 1])))\n        continue\n      }\n\n      // bar between []\n      if (param.value.match(/^\\[[^[\\]]+\\]$/)) {\n        let bar = { 'rhythm': null, 'chords': [] }\n        let str = param.value.substr(1, param.value.length - 2)\n        let parts = str.split(/\\*|:/)\n\n        // find rhythm\n        let found = false\n        for (let rhythm of this.songcheat['rhythms']) {\n          if (rhythm.name === parts[0]) {\n            bar.rhythm = rhythm.id\n            found = true\n            break\n          }\n        }\n\n        if (!found) throw new ParserException(param.line, parts[0] + ' is not the name of an existing rhythm')\n\n        // find chords\n        parts = parts.slice(1)\n        for (let part of parts) {\n          // chord repeater\n          if (!part.trim()) {\n            if (bar.chords.length === 0) throw new ParserException(param.line, 'found chord repeater but there is no chord yet in bar')\n            bar.chords.push(JSON.parse(JSON.stringify(bar.chords[bar.chords.length - 1])))\n            continue\n          }\n\n          // search for chord by its name\n          let found = false\n          for (let chord of this.songcheat['chords']) {\n            if (chord.name === part) {\n              bar.chords.push(chord.id)\n              found = true\n              break\n            }\n          }\n\n          // if no chord found with this name but this is a valid chord tablature (with an optional barred fret /[-0-9A-Z])\n          if (!found && part.match(/^[x0-9A-Z]{6}(\\/[-0-9A-Z])?$/)) {\n            // create inline chord with the name being the tablature itself, and no fingering nor comment\n            let chord = this.handleChord(param.line, 'chord', [{ value: part, line: param.line }, { value: part.split('/')[0], line: param.line }, { value: '000000/' + (part.split('/')[1] || '-'), line: param.line }])\n            bar.chords.push(chord.id)\n            found = true\n          }\n\n          if (!found) throw new ParserException(param.line, part + ' is not the name of an existing chord and is not a valid chord tablature')\n        }\n\n        bars.push(bar)\n        continue\n      }\n\n      // not a || phrase separator nor a [] bar: must be a block name\n      if (!this.blocks[param.value]) throw new ParserException(param.line, param.value + ' is not the name of an existing block')\n\n      // insert block tokens in params at current position\n      let args = [pIndex, 1]\n      Array.prototype.push.apply(args, this.blocks[param.value])\n      Array.prototype.splice.apply(params, args)\n      pIndex--\n    }\n\n    // end of last phrase\n    if (bars.length > 0) part.phrases.push({ 'bars': bars })\n  }\n\n  handleStructure (line, keyword, params) {\n    if (params.length < 2) throw new ParserException(line, keyword.toUpperCase() + ' expected at least 2 values (part name and lyrics), but found ' + params.length)\n    if (params.length % 2 !== 0) throw new ParserException(line, keyword.toUpperCase() + ' expected an even number of parameters (N x part name and lyrics), but found ' + params.length)\n    this.songcheat['structure'] = this.songcheat['structure'] || []\n\n    for (let pIndex = 0; pIndex < params.length; pIndex += 2) {\n      let param = params[pIndex]\n\n      let found = false\n      for (let part of this.songcheat['parts']) {\n        if (part.name === param.value) {\n          this.songcheat['structure'].push({ 'part': part.id, 'lyrics': params[pIndex + 1].value })\n          found = true\n          break\n        }\n      }\n\n      if (!found) throw new ParserException(param.line, param.value + '\" is not the name of an existing part')\n    }\n  }\n}\n\n/**\n * Public API\n */\n\nexport class Parser {\n  constructor () {\n    this.parser_ = new Parser_()\n  }\n\n  parse (songcheat) {\n    return this.parser_.parse(songcheat)\n  }\n\n  getPrecedingKeyword (songcheat, line) {\n    return this.parser_.getPrecedingKeyword(songcheat, line)\n  }\n}\n","import { Utils } from './utils'\n\nlet MIN_LYRICS_BARLEN = 20 // minimum length of a bar lyrics (before reducing) - not really needed but produces a clearer view when maxConsecutiveSpaces set to 0 (and thus when displaying parts with partdisplay=full) since bars with no or little text will have the same length (unless there are really many chord changes...)\nlet LYRICS_SUM_DURATIONS = false // if true \"::\" is equivalent to \":h:\" (assuming lyrics unit is :q)\nlet KEEP_EMPTY_LINES = false\n\nexport class CompilerException {\n  constructor (message) {\n    this.message = message\n  }\n\n  toString () {\n    return 'Compiler error: ' + this.message\n  }\n}\n\nclass Compiler_ {\n  constructor (DEBUG) {\n    // DEBUG 1 forces showing . * | characters in unit text (even if showDots is passed false) as well as _ for groups that were automatically created when crossing a bar\n    this.DEBUG = DEBUG\n  }\n\n  log () {\n    if (this.DEBUG > 0) console.log.apply(console, arguments)\n  }\n\n  compile (songcheat) {\n    // default values for optional properties\n    songcheat.mode = songcheat.mode || 'rt'\n    songcheat.lyricsMode = songcheat.lyricsMode || 's'\n    songcheat.barsPerLine = songcheat.barsPerLine || 4\n    songcheat.signature = songcheat.signature || {}\n    songcheat.signature.key = songcheat.signature.key || 'C'\n    songcheat.signature.time = songcheat.signature.time || { beatDuration: ':q', beatsPerBar: 4, symbol: '4/4' }\n    songcheat.lyricsUnit = songcheat.lyricsUnit || songcheat.signature.time.beatDuration\n    songcheat.chords = songcheat.chords || []\n    songcheat.rhythms = songcheat.rhythms || []\n    songcheat.parts = songcheat.parts || []\n\n    // deduce bar duration from signature\n    songcheat.barDuration = songcheat.signature.time.beatsPerBar * Utils.duration(songcheat.signature.time.beatDuration)\n\n    // resolve all id references (rhythms and chords)\n    this.resolveIds(songcheat)\n\n    // default structure if not specified : one unit for each part\n    if (!songcheat.structure) {\n      songcheat.structure = []\n      for (let part of songcheat.parts) songcheat.structure.push({ 'part': part })\n    }\n\n    // give a name to each unit if not already set = name of part with automatic numbering\n    let unitsByPart = {}\n    let numberByPart = {}\n    for (let unit of songcheat.structure) unitsByPart[unit.part.id] = typeof unitsByPart[unit.part.id] === 'undefined' ? 1 : unitsByPart[unit.part.id] + 1\n    for (let unit of songcheat.structure) {\n      numberByPart[unit.part.id] = typeof numberByPart[unit.part.id] === 'undefined' ? 1 : numberByPart[unit.part.id] + 1\n      if (!unit.name) unit.name = unit.part.name + (unitsByPart[unit.part.id] > 1 ? ' ' + numberByPart[unit.part.id] : '')\n    }\n\n    // give a color to each part if not already set\n    let colors = ['red', '#06D6A0', 'blue', 'purple', 'orange', 'magenta']\n    let partIndex = 0\n    for (let part of songcheat.parts) { if (!part.color) part.color = colors[partIndex++ % colors.length] }\n\n    // validate and compile each rhythm\n    for (let rhythm of songcheat.rhythms) this.compileRhythm(rhythm, songcheat.signature.time.beatDuration)\n\n    for (let part of songcheat.parts) {\n      // compute a \"chordChanges\" property in each phrase\n      let phraseIndex = 0\n      for (let phrase of part.phrases) {\n        phrase.chordChanges = []\n        let lastChord = null\n        for (let bar of phrase.bars) lastChord = this.addChordChanges(bar, phrase.chordChanges, songcheat.barDuration, false, lastChord)\n\n        this.log('Phrase wise chord durations for phrase ' + part.name + '.' + (phraseIndex + 1))\n        for (let c of phrase.chordChanges) this.log('\\t[' + c.chord.name + '] = ' + c.duration + ' units')\n\n        // compute a \"chordChanges\" property in each bar\n        let barIndex = 0\n        for (let bar of phrase.bars) {\n          bar.chordChanges = { 'bar': [], 'rhythm': [] }\n          for (let chordChangesMode of ['rhythm', 'bar']) this.addChordChanges(bar, bar.chordChanges[chordChangesMode], songcheat.barDuration, chordChangesMode === 'bar')\n\n          this.log('\\tRythm wise chord durations for bar ' + part.name + '.' + (phraseIndex + 1) + '.' + (barIndex + 1))\n          for (let c of bar.chordChanges['rhythm']) this.log('\\t\\t[' + c.chord.name + '] = ' + c.duration + ' units')\n          this.log('\\tBar wise chord durations for bar ' + part.name + '.' + (phraseIndex + 1) + '.' + (barIndex + 1))\n          for (let c of bar.chordChanges['bar']) this.log('\\t\\t[' + c.chord.name + '] = ' + c.duration + ' units')\n\n          barIndex++\n        }\n\n        phraseIndex++\n      }\n\n      // compute duration of part\n      part.duration = 0\n      for (let phrase of part.phrases) { for (let bar of phrase.bars) part.duration += bar.rhythm.duration }\n    }\n\n    // fluid API\n    return songcheat\n  }\n\n  resolveIds (songcheat) {\n    let unitIndex = 0\n    if (songcheat.structure) {\n      for (let unit of songcheat.structure) {\n        if (!unit.part) throw new CompilerException('Part not defined for unit ' + (unitIndex + 1))\n\n      // resolve part id\n        let part = this.resolveId(songcheat.parts, unit.part)\n        if (!part) throw new CompilerException('Part ' + unit.part + ' not found')\n        unit.part = part\n\n        unitIndex++\n      }\n    }\n\n    if (songcheat.parts) {\n      for (let part of songcheat.parts) {\n        if (!part.phrases) throw new CompilerException('Phrases not defined for part \"' + part.name + '\"')\n        if (!(part.phrases instanceof Array)) throw new CompilerException('Phrases defined for part \"' + part.name + '\" must be an Array, found: ' + (typeof songcheat.parts.phrases))\n\n        let phraseIndex = 0\n        for (let phrase of part.phrases) {\n          let barIndex = 0\n          for (let bar of phrase.bars) {\n            if (!bar.rhythm) throw new CompilerException('Rhythm not defined for bar ' + (barIndex + 1) + ' of phrase ' + (phraseIndex + 1) + ' of ' + part.name)\n            if (!bar.chords) throw new CompilerException('Chords not defined for bar ' + (barIndex + 1) + ' of phrase ' + (phraseIndex + 1) + ' of ' + part.name)\n            if (!(bar.chords instanceof Array)) throw new CompilerException('Chords defined for bar ' + (barIndex + 1) + ' of phrase ' + (phraseIndex + 1) + ' must be an Array, found: ' + (typeof bar.chords))\n\n          // resolve rhythm id\n            let rhythm = this.resolveId(songcheat.rhythms, bar.rhythm)\n            if (!rhythm) throw new CompilerException('Rhythm ' + bar.rhythm + ' not found for bar ' + (barIndex + 1) + ' of phrase ' + (phraseIndex + 1))\n            bar.rhythm = rhythm\n\n          // resolved array of chord ids\n            let chords = []\n            for (let chordId of bar.chords) {\n            // resolve chord id\n              let chord = this.resolveId(songcheat.chords, chordId)\n              if (!chord) throw new CompilerException('Chord ' + chordId + ' not found for bar ' + (barIndex + 1) + ' of phrase ' + (phraseIndex + 1))\n              chords.push(chord)\n            }\n\n            bar.chords = chords\n            barIndex++\n          }\n\n          phraseIndex++\n        }\n      }\n    }\n  }\n\n  resolveId (collection, id) {\n    if (collection) { for (let i of collection) { if (i.id === id) return i } }\n    return null\n  }\n\n  compileRhythm (rhythm, initialNoteDuration) {\n    this.log('Compiling rhythm ' + rhythm.id + ' with score \"' + rhythm.score + '\"')\n\n    // default note duration, until changed\n    let noteDuration = initialNoteDuration\n\n    // take not of each placeholder's index, so we can later fetch the associated chord\n    rhythm.placeholdercount = 0\n\n    // for locating syntax errors in message\n    let position = 1\n    let lastToken = null\n\n    // compile the score string into an array of objects\n    rhythm.compiledScore = []\n    for (let token of rhythm.score.split(/((?::(?:w|h|q|8|16|32)d?)|\\(#\\)|T?\\s*\\([^(]*\\)[^()\\sT:]*)/)) {\n      if ((token = token.trim())) {\n        let match = null\n        if ((match = token.match(/^(:(?:w|h|q|8|16|32)d?)$/))) {\n          // duration: change note duration to use next\n          noteDuration = Utils.duration(match[1])\n        } else if ((match = token.match(/^\\(#\\)$/))) {\n          // rest\n          rhythm.compiledScore.push({ rest: true, duration: noteDuration, tied: false, strings: false, flags: {}, placeholderIndex: rhythm.placeholdercount++ })\n        } else if ((match = token.match(/^(T?)\\s*\\(([^(]*)\\)([^()\\s]*)$/))) {\n          // chord placeholder\n          let tied = match[1] === 'T'\n\n          // strings = between parentheses\n          let strings = match[2]\n          if (strings === '') strings = '*' // an empty string is a shortcut for \"*\"\n          if (strings === 'x') strings = '*x' // a x alone is a shortcut for \"*x\"\n          if (!strings.match(/^(?:(\\*x?)|((?:(?:B|B'|1|2|3|4|5|6)x?)+))$/)) throw new CompilerException('Invalid syntax found in chord placeholder: ' + strings)\n\n          // flags = after parentheses\n          let flagsString = match[3]\n          let flags = { stroke: null, accent: false, pm: false, fingering: null }\n          for (let flag of flagsString.split(/(dd?|uu?|>|PM|[pima]+)/)) {\n            if (flag.trim()) {\n              if (flag.match(/^(dd?|uu?)$/g)) {\n                // stroke mode\n                if (flags.fingering) throw new CompilerException('Fingering (' + flags.fingering + ') and stroke (' + flag + ') cannot be both defined for the chord placeholder: ' + token)\n                if (flags.pm) throw new CompilerException('Palm muting (PM) and stroke (' + flag + ') cannot be both defined for the chord placeholder: ' + token)\n                if (flags.stroke) throw new CompilerException('More than one stroke mode (d, u, dd, uu) defined for the chord placeholder: ' + token)\n                flags.stroke = flag\n              } else if (flag.match(/^[pima]+$/)) {\n                // PIMA fingering\n                if (flags.stroke) throw new CompilerException('Stroke (' + flags.stroke + ') and fingering (' + flag + ') cannot be both defined for the chord placeholder: ' + token)\n                if (flags.pm) throw new CompilerException('Palm muting (PM) and fingering (' + flag + ') cannot be both defined for the chord placeholder: ' + token)\n                if (flags.fingering) throw new CompilerException('More than one fingering (pima) defined for the chord placeholder: ' + token)\n                flags.fingering = flag\n              } else if (flag.match(/^PM$/)) {\n                // palm muting\n                if (flags.stroke) throw new CompilerException('Stroke (' + flags.stroke + ') and palm muting (' + flag + ') cannot be both defined for the chord placeholder: ' + token)\n                if (flags.fingering) throw new CompilerException('Fingering (' + flags.fingering + ') and palm muting (' + flag + ') cannot be both defined for the chord placeholder: ' + token)\n                if (flags.pm) throw new CompilerException('More than one palm muting (PM) defined for the chord placeholder: ' + token)\n                flags.pm = true\n              } else if (flag.match(/^>$/)) {\n                // accent\n                if (flags.accent) throw new CompilerException('More than one accent (>) defined for the same placeholder: ' + token)\n                flags.accent = true\n              } else throw new CompilerException('Invalid flag \"' + flag + '\" defined for chord placeholder \"' + token + '\"')\n            }\n          }\n\n          // add a note\n          rhythm.compiledScore.push({ rest: false, duration: noteDuration, tied: tied, strings: strings, flags: flags, placeholderIndex: rhythm.placeholdercount++ })\n        } else throw new CompilerException('Invalid token \"' + token + '\" in rhythm score definition at position ' + position + (lastToken ? ' (after \"' + lastToken + '\")' : ''))\n\n        lastToken = token\n      }\n\n      position += token.length\n    }\n\n    // compute total rhythm duration\n    rhythm.duration = 0\n    for (let o of rhythm.compiledScore) rhythm.duration += o.duration\n  }\n\n  addChordChanges (bar, chordChanges, barDuration, resetAtBars, lastChord) {\n    // ensure number of chords match number of placeholders in rhythm score, by repeating last chord\n    if (bar.chords.length < 1) throw new CompilerException('chords must contain at least 1 entry, but ' + bar.chords.length + ' were found')\n    while (bar.chords.length < bar.rhythm.placeholdercount) bar.chords.push(bar.chords[bar.chords.length - 1])\n\n    let offset = 0\n    for (let note of bar.rhythm.compiledScore) {\n      // get chord corresponding to the placeholder position\n      let chord = bar.chords[note.placeholderIndex]\n      if (!chord) throw new CompilerException('No chord found for placeholder ' + (note.placeholderIndex + 1))\n\n      // same chord as before and not a new bar: increment duration with this new note\n      if (lastChord === chord && offset % barDuration !== 0) chordChanges[chordChanges.length - 1].duration += note.duration\n\n      // chord changed: new duration starts with one note of the new chord\n      // unless requested to reset chords at bars, chord change will be hidden if still the same as before\n      else chordChanges.push({ chord: chord, duration: note.duration, hidden: lastChord === chord && !resetAtBars })\n\n      lastChord = chord\n      offset += note.duration\n    }\n\n    return lastChord\n  }\n\n  parseLyrics (unit, defaultCursorStep, barDuration) {\n    let warnings = []\n    let offset = 0\n\n    // remove DOS newlines\n    unit.lyrics = (unit.lyrics || '').replace(/\\r/g, '')\n\n    // split lyrics into word groups, split occurs at cursor forward instructions (colons, durations and bars)\n    unit.groups = []\n    for (let part of unit.lyrics.split(/((?::(?:w|h|q|8|16|32)d?)?:|\\|)/)) { // nb: split with capture groups only works in decent browsers, e.g. IE10+\n      let match = null\n      // move cursor forward by given or default step duration\n      if ((match = part.match(/(:(?:w|h|q|8|16|32)d?)?:/))) offset = this.registerGroup(unit, offset, match[1] ? Utils.duration(match[1]) : defaultCursorStep, barDuration)\n\n      // move cursor to begin of next bar\n      else if (part.match(/\\|/)) offset = this.registerGroup(unit, offset, barDuration - (offset % barDuration), barDuration)\n\n      // (non empty) word group (waiting for its duration)\n      else if (part.length > 0) unit.groups.push({ text: part, offset: offset, duration: 0 })\n    }\n\n    // simulate a final bar if last group still open (no duration), i.e. if lyrics do not end on a : or |\n    if (unit.groups.length && unit.groups[unit.groups.length - 1].duration === 0) offset = this.registerGroup(unit, offset, barDuration - (offset % barDuration), barDuration)\n\n    // get missing duration and complete with empty groups if needed (offset now contains the total duration of all groups)\n    let missingDuration = unit.part.duration - offset\n    this.log('[' + unit.name + '] Missing duration = ' + missingDuration + ' units (' + unit.part.duration + ' - ' + offset + ') = ' + (missingDuration / barDuration) + ' bars missing')\n    if (missingDuration < 0) warnings.push('Lyrics contain ' + Math.floor(-missingDuration / barDuration) + ' bar(s)' + (-missingDuration % barDuration ? ' and ' + Utils.durationcodes(-missingDuration % barDuration) : '') + ' in excess')\n    offset = this.registerGroup(unit, offset, missingDuration, barDuration)\n\n    for (let group of unit.groups) {\n      // compute length of group (in chars), adding 1 so the group having max density is not collated with next group\n      let groupLength = this.getGroupLength(group) + 1\n\n      // ensure the bar will always have the required minimal width\n      group.plen = Math.max(groupLength, Math.ceil(MIN_LYRICS_BARLEN * group.duration / barDuration))\n\n      // compute density of group based on the obtained length\n      group.p = group.plen / group.duration\n\n      // set bar true if group ends on a bar\n      group.bar = (group.offset + group.duration) % barDuration === 0\n\n      // initialize chord changes\n      group.chordChanges = { 'bar': [], 'rhythm': [], 'phrase': [] }\n    }\n\n    // compute maximum density across all groups\n    unit.pmax = 0\n    for (let group of unit.groups) unit.pmax = Math.max(unit.pmax, group.p)\n\n    // iterate on each phrase wise chord change and find the associated group\n    offset = 0\n    for (let phrase of unit.part.phrases) {\n      for (let chordDuration of phrase.chordChanges) {\n        // find closest group starting at or before chord offset\n        let group = null\n        for (let g of unit.groups) { if (g.offset <= offset) group = g }\n        if (!group) throw new Error('No closest group found for chord ' + chordDuration.chord.name + ' with offset ' + offset + ' units')\n\n        // register chord change in group\n        group.chordChanges['phrase'].push({ offset: offset, text: this.getChordDisplay(chordDuration) })\n\n        offset += chordDuration.duration\n      }\n    }\n\n    // iterate on each bar wise chord change and find the associated group\n    offset = { 'rhythm': 0, 'bar': 0 }\n    for (let phrase of unit.part.phrases) {\n      for (let bar of phrase.bars) {\n        for (let chordChangesMode of ['rhythm', 'bar']) {\n          for (let chordDuration of bar.chordChanges[chordChangesMode]) {\n            // find closest group starting at or before chord offset\n            let group = null\n            for (let g of unit.groups) { if (g.offset <= offset[chordChangesMode]) group = g }\n            if (!group) throw new Error('No closest group found for chord ' + chordDuration.chord.name + ' with offset ' + offset[chordChangesMode] + ' units')\n\n            // register chord change in group\n            group.chordChanges[chordChangesMode].push({ offset: offset[chordChangesMode], text: this.getChordDisplay(chordDuration) })\n\n            offset[chordChangesMode] += chordDuration.duration\n          }\n        }\n      }\n    }\n\n    // debug info\n    var debugText = 'Groups of unit [' + unit.name + ']:\\n'\n    var barIndex = 0\n    let zeroDuration = false\n    for (let group of unit.groups) {\n      debugText += '\\tBar ' + (barIndex + 1) + '\\t[' + group.text.replace(/\\n/g, '\\\\N') + ']:' + group.duration + ' (' + group.offset + ' - ' + (group.offset + group.duration) + ') L=' + this.getGroupLength(group) + \" L'=\" + group.plen + ' ρ=' + group.p.toFixed(2) + ' #Chord changes %bar= ' + group.chordChanges['bar'].length + ' %phrase= ' + group.chordChanges['phrase'].length\n      if (group.duration === 0) zeroDuration = true\n      if (group.bar) {\n        barIndex++\n        debugText += ' | '\n      }\n      debugText += '\\n'\n    }\n    debugText += 'ρ max = ' + unit.pmax.toFixed(2)\n    this.log(debugText)\n\n    if (zeroDuration) throw new Error('Detected group with 0 duration')\n\n    return warnings\n  }\n\n  getUnitText (unit, maxConsecutiveSpaces, split, chordChangesMode, showDots) {\n    var unitText = ''\n\n    // concatenate lyrics groups, giving them a number of positions proprtional to their duration\n    var barIndex = 0\n    var groupIndex = 0\n    for (let group of unit.groups) {\n      // where and on how many positions will this group be displayed\n      group.position = [...unitText.replace(/\\n/g, '')].length\n      group.length = Math.ceil(group.duration * unit.pmax)\n\n      // an hyphen means a word has been cut in two, no need for a space before next group\n      // but if the final character should be a bar, then always count this extra character\n      let needFinalSpace = group.bar || !group.text.match(/-$/)\n\n      // if maxConsecutiveSpaces is set, set a maximum for the number of allowed positions if needed\n      let maxLength = null\n      if (maxConsecutiveSpaces > 0) maxLength = this.getGroupLength(group) + maxConsecutiveSpaces - (needFinalSpace ? 0 : 1)\n      if (maxLength) group.length = Math.min(group.length, maxLength)\n\n      // but if group has associated chords, we must have enough space for them (and this has priority over maxConsecutiveSpaces)\n      let minLength = group.bar ? 1 : 0 // 1 for the final bar sign if any\n      if (group.chordChanges[chordChangesMode]) { for (let i = 0; i < group.chordChanges[chordChangesMode].length; i++) minLength += group.chordChanges[chordChangesMode][i].text.length }\n      minLength = Math.max(this.getGroupLength(group) + (needFinalSpace ? 1 : 0), minLength)\n      group.length = Math.max(group.length, minLength)\n\n      // filler string used to reach that length (nb: filler will always have a length of at least 1)\n      let filler = Utils.spaces(group.length - this.getGroupLength(group), showDots || this.DEBUG ? '.' : ' ')\n\n      // replace last character of filler by a | if this is the end of a bar\n      filler = filler.replace(/(.)$/, group.bar ? (split > 0 && ((barIndex + 1) % split === 0) ? '|\\n' : '|') : (this.DEBUG ? '*' : '$1'))\n\n      // append filler to text, remove new lines if splitting at bars\n      var groupText = (split > 0 ? group.text.replace(/\\n/g, '') : group.text) + filler\n\n      this.log('[' + unit.name + '] Display group ' + (groupIndex + 1) + ' \"' + groupText.replace(/\\n/g, '\\\\N') + '\" on ' + group.length + ' chars (CEIL ' + (group.duration * unit.pmax).toFixed(2) + ' MIN ' + minLength + ' MAX ' + (maxLength || 'n/a') + ')')\n      unitText += groupText\n\n      groupIndex++\n      if (group.bar) barIndex++\n    }\n\n    // we weren't asked to add chords\n    if (!chordChangesMode) return unitText\n\n    // build chord inserts, based on bar or phrase wise changes, each with the text and position where to insert\n    let chordInserts = []\n    for (let group of unit.groups) {\n      let lengthStillToPlaceOnThisGroup = 0\n      let lengthYetPlacedOnThisGroup = 0\n\n      // compute length of all chord inserts\n      for (let chordChange of group.chordChanges[chordChangesMode]) lengthStillToPlaceOnThisGroup += chordChange.text.length\n\n      for (let chordChange of group.chordChanges[chordChangesMode]) {\n        // position of the chord will be the position of the group + length corresponding to offset delta\n        let positionDelta = Math.ceil(((chordChange.offset - group.offset) / group.duration) * group.length)\n        let positionDelta_ = positionDelta\n\n        // ensure that chord name will not cross end of group it belongs to (last char of group must not be overwritten either if it is a bar)\n        while (positionDelta + lengthStillToPlaceOnThisGroup > group.length - (group.bar ? 1 : 0)) { positionDelta-- }\n\n        // ensure that chords already there still have enough room\n        while (positionDelta - lengthYetPlacedOnThisGroup < 0) { positionDelta++ }\n\n        this.log('Closest group \"' + group.text.replace(/\\n/g, '\\\\n') + '\" with offset ' + group.offset + ' and position ' + group.position + ' found for ' + chordChange.text.trim() + ' with offset ' + chordChange.offset + ' units\\n\\tposition delta from group start = ' + positionDelta + ' chars (initially ' + positionDelta_ + ' chars)')\n        chordInserts.push({ text: chordChange.text, offset: chordChange.offset, position: group.position + positionDelta })\n\n        lengthYetPlacedOnThisGroup = positionDelta + chordChange.text.length\n        lengthStillToPlaceOnThisGroup -= chordChange.text.length\n      }\n    }\n\n    for (let chordInsert of chordInserts) this.log('[' + unit.name + '] Should insert ' + chordInsert.text + ' @ ' + chordInsert.offset + ' units / ' + chordInsert.position + ' chars')\n\n    // insert these chord inserts\n    let position = 0\n    let skip = 0\n    let unitText_ = unitText\n    let chordText = ''\n    unitText = ''\n    for (let char of unitText_) {\n      if (char === '\\n') {\n        unitText += '\\n'\n        chordText += '\\n'\n        skip = 0\n      } else {\n        for (let chordInsert of chordInserts) {\n          if (!chordInsert.inserted) {\n            if (chordInsert.position <= position) {\n              this.log('[' + unit.name + '] Inserting ' + chordInsert.text + ' @ ' + position + ' chars')\n              chordText += chordInsert.text\n              chordInsert.inserted = true\n              skip = chordInsert.text.length\n            }\n          }\n        }\n\n        position++\n\n        // add char to unit text, and corresponding space to chord text\n        // only bar symbols are added in chord text instead of unit text (if showing dots, then bars are displayed in both texts)\n        if (skip === 0) { chordText += char === '|' ? char : ' ' } else { skip-- }\n        unitText += char === '|' && !(showDots || this.DEBUG) ? ' ' : char\n      }\n    }\n\n    // and interlace the two strings\n    return Utils.interlace(chordText, unitText, null, KEEP_EMPTY_LINES)\n  }\n\n  registerGroup (unit, offset, step, barDuration) {\n    if (!barDuration) throw new Error('Invalid bar duration passed to registerGroup')\n\n    while (step > 0) {\n      // duration added to preceding group may never be more than what's left until end of bar\n      let addDuration = Math.min(step, barDuration - (offset % barDuration))\n\n      // create a new group if none or if preceding already got its duration\n      if (!unit.groups.length || (!LYRICS_SUM_DURATIONS && unit.groups[unit.groups.length - 1].duration > 0)) unit.groups.push({ text: '', offset: offset, duration: 0 })\n\n      // add this duration to preceding group (create it if needed)\n      unit.groups[unit.groups.length - 1].duration += addDuration\n      offset += addDuration\n      step -= addDuration\n\n      // step is going to cross end of bar: directly create a first empty group\n      if (step > 0) unit.groups.push({ text: this.DEBUG > 1 ? '_' : '', offset: offset, duration: 0 })\n    }\n\n    return offset\n  }\n\n  getGroupLength (group) {\n    // return the number of visible graphemes in group text\n    // - newlines are not counted\n    // - tabs will be converted to spaces and may thus count as 1\n    // - use spread operator to correctly count astral unicode symbols\n    return [...group.text.replace(/\\n/g, '')].length\n  }\n\n  getChordDisplay (chordDuration) {\n    // space and not empty if hidden, to ensure that a white space will show that this change does not happen at the begin of the bar\n    if (chordDuration.hidden) return ' '\n\n    // a space prevents chord names to be glued together on group and prevents a next group from starting directly after last chord of previous group\n    return chordDuration.chord.name + ' '\n  }\n}\n\n/**\n * Public API\n */\n\nexport class Compiler {\n  constructor (songcheat, DEBUG) {\n    this.compiler_ = new Compiler_(DEBUG)\n    if (songcheat) this.set(songcheat)\n  }\n\n  set (songcheat) {\n    this.compiler_.log(Utils.title('COMPILE SONGCHEAT'))\n    this.scc = this.compiler_.compile(JSON.parse(JSON.stringify(songcheat)))\n  }\n\n  parseLyrics (unit) {\n    this.compiler_.log(Utils.title('PARSE LYRICS ' + unit.name))\n    return this.compiler_.parseLyrics(unit, Utils.duration(this.scc.lyricsUnit), this.scc.barDuration)\n  }\n\n  getUnitText (unit, maxConsecutiveSpaces, split, chordChangesMode, showDots) {\n    this.compiler_.log(Utils.title(`GET LYRICS TEXT ${unit.name} (maxConsecutiveSpaces = ${maxConsecutiveSpaces}, split = ${split}, chordChangesMode = ${chordChangesMode}, showDots = ${showDots})`))\n    return this.compiler_.getUnitText(unit, maxConsecutiveSpaces, split, chordChangesMode, showDots)\n  }\n\n  getPartText (part, maxConsecutiveSpaces, split, chordChangesMode, showDots) {\n    // dummy unit with no lyrics\n    let unit = { name: part.name, part: part }\n\n    this.compiler_.log(Utils.title('PARSE PART LYRICS ' + unit.name))\n    this.compiler_.parseLyrics(unit, Utils.duration(this.scc.lyricsUnit), this.scc.barDuration)\n\n    this.compiler_.log(Utils.title(`GET PART LYRICS TEXT ${unit.name} (maxConsecutiveSpaces = ${maxConsecutiveSpaces}, split = ${split}, chordChangesMode = ${chordChangesMode}, showDots = ${showDots})`))\n    return this.compiler_.getUnitText(unit, maxConsecutiveSpaces, split, chordChangesMode, showDots)\n  }\n}\n"],"names":["Utils","a","b","length","i","str","spaces","s","charAt","toUpperCase","slice","firstUpper","camel","toLowerCase","replace","match","group1","char","isNaN","isFinite","Error","text1","text2","sepLine","keepEmptyLines","a1","split","a2","map","v","lines","trim","push","join","data","ret","d","encodeURIComponent","code","units","duration","codes","current","rest","durationcode","e","fret","String","fromCharCode","charCodeAt","parseInt","startingFret","char2fret","relFret","fret2char","chord","strings","tablature","name","fingering","result","string","indexOf","xIndex","mute","ParserException","line","message","Parser_","songcheat","blocks","text","tokens","tokenize","tokenIndex","token","keyword","isKeyword","value","params","handler","handleDefault","call","lastResult","chordIndex","rhythmIndex","partIndex","unitIndex","chords","rhythms","parts","paramIndex","param","Math","floor","camelCase","reSpaces","reNewline","lineNumber","parseFloat","handleSignature","comment","part","splice","bars","pIndex","phrases","JSON","parse","stringify","bar","substr","found","rhythm","id","handleChord","args","prototype","apply","Parser","parser_","getPrecedingKeyword","MIN_LYRICS_BARLEN","LYRICS_SUM_DURATIONS","KEEP_EMPTY_LINES","CompilerException","Compiler_","DEBUG","console","log","arguments","mode","lyricsMode","barsPerLine","signature","key","time","beatDuration","beatsPerBar","symbol","lyricsUnit","barDuration","resolveIds","structure","unitsByPart","numberByPart","unit","colors","color","compileRhythm","phraseIndex","phrase","chordChanges","lastChord","addChordChanges","c","barIndex","chordChangesMode","resolveId","Array","chordId","collection","initialNoteDuration","score","noteDuration","placeholdercount","position","lastToken","compiledScore","tied","flags","placeholderIndex","flagsString","stroke","accent","pm","flag","o","resetAtBars","offset","note","hidden","defaultCursorStep","warnings","lyrics","groups","registerGroup","missingDuration","durationcodes","group","groupLength","getGroupLength","plen","max","ceil","p","pmax","chordDuration","g","getChordDisplay","debugText","zeroDuration","toFixed","maxConsecutiveSpaces","showDots","unitText","groupIndex","needFinalSpace","maxLength","min","minLength","filler","groupText","chordInserts","lengthStillToPlaceOnThisGroup","lengthYetPlacedOnThisGroup","chordChange","positionDelta","positionDelta_","chordInsert","skip","unitText_","chordText","inserted","interlace","step","addDuration","Compiler","compiler_","set","title","scc","compile","parseLyrics","getUnitText"],"mappings":"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"}