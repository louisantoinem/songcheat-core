{"version":3,"file":"test.chords.umd.js","sources":["../src/utils.js","../src/chordpix.js","../test/chords.js"],"sourcesContent":["export class Utils {\n  /**\n  * Array helper functions\n  */\n\n  static arraysEqual (a, b) {\n    if (a === b) return true\n    if (a === null || b === null) return false\n    if (a.length !== b.length) return false\n    for (var i = 0; i < a.length; ++i) {\n      if (a[i] !== b[i]) return false\n    }\n    return true\n  }\n\n  /**\n  * String helper functions\n  */\n\n  static title (str) {\n    return '\\n' + this.spaces(str.length + 8, '*') + '\\n*** ' + str + ' ***\\n' + this.spaces(str.length + 8, '*') + '\\n'\n  }\n\n  static firstUpper (s) {\n    return s.charAt(0).toUpperCase() + s.slice(1)\n  }\n\n  static camelCase (s, firstUpper) {\n    var camel = s.toLowerCase().replace(/(?:[-_])(.)/g, function (match, group1) { return group1.toUpperCase() })\n    return firstUpper ? camel.charAt(0).toUpperCase() + camel.slice(1) : camel\n  }\n\n  static spaces (length, char) {\n    if (isNaN(length) || !isFinite(length) || length < 0) throw new Error('Length must a positive finite number')\n    var s = ''\n    for (var i = 0; i < length; i++) s += char || ' '\n    return s\n  }\n\n  /**\n   * Interlace two multi line strings: one line of each file in alternance\n   * If the second file contains more line then the first one, these additional lines will be ignored\n   **/\n\n  static interlace (text1, text2, sepLine, keepEmptyLines) {\n    var a1 = text1.split(/\\r?\\n/)\n    var a2 = text2.split(/\\r?\\n/)\n    var a = a1.map(function (v, i) {\n      let lines = keepEmptyLines || (a2[i] && a2[i].trim()) ? [v, a2[i]] : [v]\n      if (typeof sepLine === 'string') lines.push(sepLine)\n      return lines.join('\\n')\n    })\n    return a.join('\\n')\n  }\n\n  /**\n   * Encode given parameters as a GET query string\n   **/\n\n  static encodeQueryData (data) {\n    let ret = []\n    for (let d in data) { ret.push(encodeURIComponent(d) + '=' + encodeURIComponent(data[d])) }\n    return ret.join('&')\n  }\n\n  /**\n   * Convert a duration code to the smallest unit (64th)\n   **/\n\n  static duration (code) {\n    if (code === ':32') return 2\n    if (code === ':16') return 4\n    if (code === ':8') return 8\n    if (code === ':q') return 16\n    if (code === ':h') return 32\n    if (code === ':w') return 64\n\n    if (code === ':32d') return 3\n    if (code === ':16d') return 6\n    if (code === ':8d') return 12\n    if (code === ':qd') return 24\n    if (code === ':hd') return 48\n    if (code === ':wd') return 96\n\n    throw new Error('Invalid duration code \"' + code + '\"')\n  }\n\n  /**\n   * Convert back a number of units (64th) into a duration code\n   **/\n\n  static durationcode (units) {\n    for (let code of ['w', 'h', 'q', '8', '16', '32']) {\n      if (this.duration(':' + code) === units) return ':' + code\n      if (this.duration(':' + code + 'd') === units) return ':' + code + 'd'\n    }\n\n    throw new Error('Could not find a code with a value of ' + units + ' units')\n  }\n\n  /**\n   * Convert a number of units (64th) into one or several duration codes\n   **/\n\n  static durationcodes (units) {\n    var codes = []\n\n    var current = units\n    var rest = 0\n\n    while (current > 0) {\n      try {\n        codes.push(this.durationcode(current))\n        current = rest\n        rest = 0\n      } catch (e) {\n        current--\n        rest++\n      }\n    }\n\n    if (rest > 0) throw new Error('Could not find codes adding to a value of ' + units + ' units')\n\n    return codes\n  }\n\n  /**\n   * Convert a fret number (up to 35) to a single char (digit or capital letter)\n   * Fret 10 is notated as A, 11 as B, ... and 35 as Z\n   */\n\n  static fret2char (fret) {\n    if (isNaN(fret) || fret < 0 || fret > 35) throw new Error('Cannot convert fret number ' + fret + ' to a single char (expected a value between 0 and 35)')\n    return fret < 10 ? '' + fret : String.fromCharCode('A'.charCodeAt(0) + fret - 10)\n  }\n\n  /**\n   * Convert a single char (digit or capital letter) to a fret number\n   * A means fret 10, 11 fret B, ... and Z fret 35\n   */\n\n  static char2fret (char) {\n    if (typeof char !== 'string') throw new Error('Invalid fret char ' + char + ' expected a string')\n    if (!char.match(/^[0-9A-Z]$/)) throw new Error('Invalid fret char ' + char + ' (expected a value between [0-9] or [A-Z])')\n    return char >= 'A' ? 10 + char.charCodeAt(0) - 'A'.charCodeAt(0) : parseInt(char, 10)\n  }\n\n  /**\n   * Convert an absolute fret number (single char) to a relative fret number (0 never changes)\n   */\n\n  static abs2rel (char, startingFret) {\n    let fret = this.char2fret(char)\n    if (isNaN(fret) || fret < 0) throw new Error('Invalid fret number ' + fret + ' (expected a positive or 0 integer value)')\n    if (fret === 0) return 0\n    if (isNaN(startingFret) || startingFret < 0) throw new Error('Invalid starting fret number ' + startingFret + ' (expected a positive or 0 integer value)')\n    if (startingFret + 8 < fret || startingFret > fret) throw new Error('Fret ' + fret + ' cannot be made relative to starting fret ' + startingFret + ' within the allowed range of 1 to 9')\n    return fret + 1 - startingFret\n  }\n\n  /**\n   * Convert a relative fret number to an absolute fret number (single char) (0 never changes)\n   */\n\n  static rel2abs (relFret, startingFret) {\n    return this.fret2char(relFret ? relFret + startingFret - 1 : relFret)\n  }\n\n  /**\n   * Take a chord and a placeholder contents\n   * Return an array containing one object { string, fret, mute } for each played string\n   */\n\n  static chordStrings (chord, strings) {\n    if (!chord.tablature) throw new Error('Tablature not defined for chord ' + chord.name)\n    if (!chord.fingering) throw new Error('Fingering not defined for chord ' + chord.name)\n\n    var result = []\n    for (var i = 0; i < chord.tablature.length; i++) {\n      // string will be between 6 and 1 since chord.tablature.length has been verified and is 6\n      var string = 6 - i\n\n      // string never played in this chord\n      if (chord.tablature[i] === 'x') continue\n\n      // first time we meet a played string, it's the bass so replace B and B' with the string number\n      strings = strings.replace(/B'/g, (string >= 5 ? string - 1 : string))\n      strings = strings.replace(/B/g, string)\n\n      // check if this string should be played with the right hand\n      // * means \"all strings\", otherwise concatenated specific string numbers are specified (or B for bass or B' for alternate bass)\n      // x after string means muted (ghost) note\n      if (strings.match(/^\\*/) || strings.indexOf(string) !== -1) {\n        let fret = this.char2fret(chord.tablature[i])\n        let xIndex = strings.match(/^\\*/) ? 1 : strings.indexOf(string) + 1\n        let mute = strings[xIndex] === 'x'\n        result.push({\n          string: string,\n          fret: fret,\n          mute: mute\n        })\n      }\n    }\n\n    return result\n  }\n}\n","import { Utils } from './utils'\n\nexport class ChordPixException {\n  constructor (message) {\n    this.message = message\n  }\n\n  toString () {\n    return 'Chordpix error: ' + this.message\n  }\n}\n\nexport class ChordPix {\n  static parse (url) {\n    try {\n      // validate and explode url at slashes\n      if (!url.match(/https?:\\/\\/chordpix.com\\/i\\/[0-9]+\\/6\\/[0-9]+\\/[0-9]+\\/[x0-6]{6}\\/[T0-4]{6}\\/(-|[0-9]+)\\/.+\\..+/)) throw new ChordPixException('Invalid ChordPix image URL')\n      let parts = url.split(/\\//)\n\n      // get chord name replacing ♯ with # and ♭ with b so that chord names can be easily typed in songcheat text file\n      let name = parts[11].split('.')[0].replace(/♯/g, '#').replace(/♭/g, 'b')\n\n      // get starting fret\n      let startingFret = parseInt(parts[7], 10)\n\n      // get absolute barred fret (single char) (\"-\" kept as is)\n      let barredFret = parts[10] === '-' ? parts[10] : Utils.rel2abs(parseInt(parts[10], 10), startingFret)\n\n      // build an absolute tablature (single char x6) (\"x\" kept as is)\n      let tablature = ''\n      for (let char of parts[8]) tablature += char === 'x' ? char : Utils.rel2abs(parseInt(char, 10), startingFret)\n\n      return {\n        name: name,\n        tablature: tablature,\n        fingering: parts[9] + '/' + barredFret,\n        comment: ''\n      }\n    } catch (e) {\n      throw new ChordPixException('[URL ' + url + '] ' + e.message)\n    }\n  }\n\n  static url (chord, chordWidth) {\n    try {\n      // check tablature is valid\n      if (typeof chord.tablature !== 'string') throw new Error('chord.tablature must be a string')\n      if (chord.tablature.length !== 6) throw new Error('chord.tablature must be exactly 6 characters long (one for each guitar string)')\n      if (!chord.tablature.match(/^[x0-9A-Z]{6}$/)) throw new Error('chord.tablature must contain only digits and capital letters (representing a fret number), or \"x\" (for mute)')\n\n      // check fingering is valid\n      if (typeof chord.fingering !== 'string') throw new Error('chord.fingering must be a string')\n      if (chord.fingering.length !== 8) throw new Error('chord.fingering must be exactly 8 characters long (....../.)')\n      if (!chord.fingering.match(/^[PT01234]{6}.*$/)) throw new Error('the first 6 characters of chord.fingering can only be P,T,1,2,3,4 or 0 (each character represents a finger)')\n      if (!chord.fingering.match(/^[PT01234]{6}\\/[-0-9A-Z]$/)) throw new Error('the last 2 characters of chord.fingering must be a \"/\" followed by a digit or capital letter (representing the number of the barred fret) or \"-\" if there is no barred fret')\n\n      // convert 6 chars into 6 integers (null for x)\n      let frets = []\n      for (let char of chord.tablature) frets.push(char === 'x' ? null : Utils.char2fret(char))\n\n      // get max and min fret (excluding null and 0), use 1 if chord has no frets at all\n      let minFret = frets.filter(x => x).length > 0 ? Math.min(...frets.filter(x => x)) : 1\n      let maxFret = frets.filter(x => x).length > 0 ? Math.max(...frets.filter(x => x)) : 1\n\n      // get number of frets to display on diagram (with minimum of 4)\n      let nbFrets = Math.max(4, maxFret + 1 - minFret)\n\n      // get first fret displayed in the diagram: start at 1 if possible otherwise start at minFret\n      let startingFret = maxFret + 1 - nbFrets <= 1 ? 1 : minFret\n\n      // get relative barred fret (\"-\" kept as is)\n      let fingering = chord.fingering.split('/')\n      if (fingering[1] && fingering[1] !== '-') fingering[1] = Utils.abs2rel(fingering[1], startingFret)\n\n      // build a relative tablature (\"0\" and \"x\" kept as is)\n      let relTablature = ''\n      for (let char of chord.tablature) relTablature += char === 'x' || char === '0' ? char : Utils.abs2rel(char, startingFret)\n\n      // use nice ♯ and ♭ in diagram (replace only last occurence)\n      let name = chord.name ? chord.name.replace(/#([^#]*)$/, '♯$1').replace(/b([^b]*)$/, '♭$1') : chord.tablature\n\n      // build final url\n      return 'http://chordpix.com/i/' + (chordWidth || 450) + '/6/' + nbFrets + '/' + startingFret + '/' + relTablature + '/' + fingering.join('/') + '/' + name + '.png'\n    } catch (e) {\n      throw new ChordPixException('[Chord ' + JSON.stringify(chord) + '] ' + e.message)\n    }\n  }\n}\n","import { ChordPix } from '../src/chordpix'\nimport samples from 'songcheat-samples'\n\n// https://github.com/rollup/rollup/issues/1803/\n// import $ from 'jQuery'\nlet $ = window.jQuery\n\n// get a random sample songcheat\nlet songcheat = samples[Math.floor(Math.random() * samples.length)]\n$('body>h1').html(`${songcheat.title} (${songcheat.artist}, ${songcheat.year})`)\n\n// display chord diagrams\nfor (let chord of songcheat.chords) {\n  var url = ChordPix.url(chord, 200)\n  console.info(url)\n  $('body>div').append(\n    $('<div>')\n      .css({ 'display': 'inline-block', 'vertical-align': 'top' })\n      .append($('<img>').attr('src', url))\n  )\n}\n"],"names":[],"mappings":"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"}